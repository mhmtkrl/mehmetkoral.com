

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Fri Jan 29 14:37:23 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.20
    20                           ; Generated 12/02/2020 GMT
    21                           ; 
    22                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F877A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0098                     	;# 
   102  0099                     	;# 
   103  009C                     	;# 
   104  009D                     	;# 
   105  009E                     	;# 
   106  009F                     	;# 
   107  010C                     	;# 
   108  010D                     	;# 
   109  010E                     	;# 
   110  010F                     	;# 
   111  018C                     	;# 
   112  018D                     	;# 
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000D                     	;# 
   127  000E                     	;# 
   128  000E                     	;# 
   129  000F                     	;# 
   130  0010                     	;# 
   131  0011                     	;# 
   132  0012                     	;# 
   133  0013                     	;# 
   134  0014                     	;# 
   135  0015                     	;# 
   136  0015                     	;# 
   137  0016                     	;# 
   138  0017                     	;# 
   139  0018                     	;# 
   140  0019                     	;# 
   141  001A                     	;# 
   142  001B                     	;# 
   143  001B                     	;# 
   144  001C                     	;# 
   145  001D                     	;# 
   146  001E                     	;# 
   147  001F                     	;# 
   148  0081                     	;# 
   149  0085                     	;# 
   150  0086                     	;# 
   151  0087                     	;# 
   152  0088                     	;# 
   153  0089                     	;# 
   154  008C                     	;# 
   155  008D                     	;# 
   156  008E                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0093                     	;# 
   160  0094                     	;# 
   161  0098                     	;# 
   162  0099                     	;# 
   163  009C                     	;# 
   164  009D                     	;# 
   165  009E                     	;# 
   166  009F                     	;# 
   167  010C                     	;# 
   168  010D                     	;# 
   169  010E                     	;# 
   170  010F                     	;# 
   171  018C                     	;# 
   172  018D                     	;# 
   173                           
   174                           	psect	idataBANK0
   175  05C7                     __pidataBANK0:
   176                           
   177                           ;initializer for _txt
   178  05C7  340D               	retlw	13
   179  05C8  340A               	retlw	10
   180  05C9  3450               	retlw	80
   181  05CA  3449               	retlw	73
   182  05CB  3443               	retlw	67
   183  05CC  3423               	retlw	35
   184  05CD  3439               	retlw	57
   185  05CE  342D               	retlw	45
   186  05CF  3441               	retlw	65
   187  05D0  342F               	retlw	47
   188  05D1  3444               	retlw	68
   189  05D2  3420               	retlw	32
   190  05D3  3443               	retlw	67
   191  05D4  346F               	retlw	111
   192  05D5  346E               	retlw	110
   193  05D6  3476               	retlw	118
   194  05D7  3465               	retlw	101
   195  05D8  3472               	retlw	114
   196  05D9  3474               	retlw	116
   197  05DA  3465               	retlw	101
   198  05DB  3472               	retlw	114
   199  05DC  340D               	retlw	13
   200  05DD  340A               	retlw	10
   201  05DE  3400               	retlw	0
   202                           
   203                           	psect	strings
   204  0003                     __pstrings:
   205  0003                     stringtab:
   206  0003                     __stringtab:
   207  0003                     stringcode:	
   208                           ;	String table - string pointers are 1 byte each
   209                           
   210  0003                     stringdir:
   211  0003  3000               	movlw	high stringdir
   212  0004  008A               	movwf	10
   213  0005  0804               	movf	4,w
   214  0006  0A84               	incf	4,f
   215  0007  0782               	addwf	2,f
   216  0008                     __stringbase:
   217  0008  3400               	retlw	0
   218  0009                     __end_of__stringtab:
   219  0009                     _dpowers:
   220  0009  3401               	retlw	1
   221  000A  3400               	retlw	0
   222  000B  340A               	retlw	10
   223  000C  3400               	retlw	0
   224  000D  3464               	retlw	100
   225  000E  3400               	retlw	0
   226  000F  34E8               	retlw	232
   227  0010  3403               	retlw	3
   228  0011  3410               	retlw	16
   229  0012  3427               	retlw	39
   230  0013                     __end_of_dpowers:
   231  001E                     _ADRESH	set	30
   232  0019                     _TXREG	set	25
   233  0018                     _RCSTAbits	set	24
   234  001F                     _ADCON0bits	set	31
   235  0008                     _PORTD	set	8
   236  009E                     _ADRESL	set	158
   237  008C                     _PIE1bits	set	140
   238  0098                     _TXSTAbits	set	152
   239  0099                     _SPBRG	set	153
   240  0087                     _TRISC	set	135
   241  009F                     _ADCON1bits	set	159
   242  0085                     _TRISA	set	133
   243  0088                     _TRISD	set	136
   244  0013                     STR_1:
   245  0013  3441               	retlw	65	;'A'
   246  0014  3464               	retlw	100	;'d'
   247  0015  3463               	retlw	99	;'c'
   248  0016  3420               	retlw	32	;' '
   249  0017  3456               	retlw	86	;'V'
   250  0018  3461               	retlw	97	;'a'
   251  0019  346C               	retlw	108	;'l'
   252  001A  3475               	retlw	117	;'u'
   253  001B  3465               	retlw	101	;'e'
   254  001C  3420               	retlw	32	;' '
   255  001D  343D               	retlw	61	;'='
   256  001E  3420               	retlw	32	;' '
   257  001F  3425               	retlw	37	;'%'
   258  0020  3464               	retlw	100	;'d'
   259  0021  340D               	retlw	13
   260  0022  340A               	retlw	10
   261  0023  3400               	retlw	0
   262                           
   263                           	psect	cinit
   264  07EC                     start_initialization:	
   265                           ; #config settings
   266                           
   267  07EC                     __initialization:
   268                           
   269                           ; Initialize objects allocated to BANK0
   270  07EC  1383               	bcf	3,7	;select IRP bank0
   271  07ED  3038               	movlw	low (__pdataBANK0+24)
   272  07EE  00FD               	movwf	btemp+-1
   273  07EF  3005               	movlw	high __pidataBANK0
   274  07F0  00FE               	movwf	btemp
   275  07F1  30C7               	movlw	low __pidataBANK0
   276  07F2  00FF               	movwf	btemp+1
   277  07F3  3020               	movlw	low __pdataBANK0
   278  07F4  0084               	movwf	4
   279  07F5  120A  118A  25B8  120A  118A  	fcall	init_ram0
   280                           
   281                           ; Clear objects allocated to BANK0
   282  07FA  01CA               	clrf	__pbssBANK0& (0+127)
   283  07FB  01CB               	clrf	(__pbssBANK0+1)& (0+127)
   284  07FC                     end_of_initialization:	
   285                           ;End of C runtime variable initialization code
   286                           
   287  07FC                     __end_of__initialization:
   288  07FC  0183               	clrf	3
   289  07FD  120A  118A  2E5D   	ljmp	_main	;jump to C main() function
   290                           
   291                           	psect	bssBANK0
   292  004A                     __pbssBANK0:
   293  004A                     _adc_data:
   294  004A                     	ds	2
   295                           
   296                           	psect	dataBANK0
   297  0020                     __pdataBANK0:
   298  0020                     _txt:
   299  0020                     	ds	24
   300                           
   301                           	psect	inittext
   302  05B4                     init_fetch0:	
   303                           ;	Called with low address in FSR and high address in W
   304                           
   305  05B4  087E               	movf	btemp,w
   306  05B5  008A               	movwf	10
   307  05B6  087F               	movf	btemp+1,w
   308  05B7  0082               	movwf	2
   309  05B8                     init_ram0:	
   310                           ;Called with:
   311                           ;	high address of idata address in btemp 
   312                           ;	low address of idata address in btemp+1 
   313                           ;	low address of data in FSR
   314                           ;	high address + 1 of data in btemp-1
   315                           
   316  05B8  120A  118A  25B4  120A  118A  	fcall	init_fetch0
   317  05BD  0080               	movwf	0
   318  05BE  0A84               	incf	4,f
   319  05BF  0804               	movf	4,w
   320  05C0  067D               	xorwf	btemp+-1,w
   321  05C1  1903               	btfsc	3,2
   322  05C2  3400               	retlw	0
   323  05C3  0AFF               	incf	btemp+1,f
   324  05C4  1903               	btfsc	3,2
   325  05C5  0AFE               	incf	btemp,f
   326  05C6  2DB8               	goto	init_ram0
   327                           
   328                           	psect	cstackCOMMON
   329  0070                     __pcstackCOMMON:
   330  0070                     ?_main:
   331  0070                     ?___lwdiv:	
   332                           ; 1 bytes @ 0x0
   333                           
   334  0070                     ___lwdiv@divisor:	
   335                           ; 2 bytes @ 0x0
   336                           
   337                           
   338                           ; 2 bytes @ 0x0
   339  0070                     	ds	2
   340  0072                     ___lwdiv@dividend:
   341                           
   342                           ; 2 bytes @ 0x2
   343  0072                     	ds	2
   344  0074                     ??___lwdiv:
   345                           
   346                           ; 1 bytes @ 0x4
   347  0074                     	ds	1
   348  0075                     ___lwdiv@quotient:
   349                           
   350                           ; 2 bytes @ 0x5
   351  0075                     	ds	2
   352  0077                     ___lwdiv@counter:
   353                           
   354                           ; 1 bytes @ 0x7
   355  0077                     	ds	1
   356  0078                     ?___lwmod:
   357  0078                     ___lwmod@divisor:	
   358                           ; 2 bytes @ 0x8
   359                           
   360                           
   361                           ; 2 bytes @ 0x8
   362  0078                     	ds	2
   363  007A                     ___lwmod@dividend:
   364                           
   365                           ; 2 bytes @ 0xA
   366  007A                     	ds	2
   367  007C                     ??___lwmod:
   368                           
   369                           ; 1 bytes @ 0xC
   370  007C                     	ds	1
   371  007D                     ___lwmod@counter:
   372                           
   373                           ; 1 bytes @ 0xD
   374  007D                     	ds	1
   375                           
   376                           	psect	cstackBANK0
   377  0038                     __pcstackBANK0:
   378  0038                     ?_sprintf:
   379  0038                     sprintf@f:	
   380                           ; 2 bytes @ 0x0
   381                           
   382                           
   383                           ; 1 bytes @ 0x0
   384  0038                     	ds	3
   385  003B                     ??_sprintf:
   386                           
   387                           ; 1 bytes @ 0x3
   388  003B                     	ds	3
   389  003E                     sprintf@ap:
   390                           
   391                           ; 1 bytes @ 0x6
   392  003E                     	ds	1
   393  003F                     sprintf@flag:
   394                           
   395                           ; 1 bytes @ 0x7
   396  003F                     	ds	1
   397  0040                     sprintf@prec:
   398                           
   399                           ; 1 bytes @ 0x8
   400  0040                     	ds	1
   401  0041                     sprintf@val:
   402                           
   403                           ; 2 bytes @ 0x9
   404  0041                     	ds	2
   405  0043                     sprintf@sp:
   406                           
   407                           ; 1 bytes @ 0xB
   408  0043                     	ds	1
   409  0044                     sprintf@c:
   410                           
   411                           ; 1 bytes @ 0xC
   412  0044                     	ds	1
   413  0045                     ??_main:
   414                           
   415                           ; 1 bytes @ 0xD
   416  0045                     	ds	3
   417  0048                     main@k:
   418                           
   419                           ; 2 bytes @ 0x10
   420  0048                     	ds	2
   421                           
   422                           	psect	maintext
   423  065D                     __pmaintext:	
   424 ;;
   425 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   426 ;;
   427 ;; *************** function _main *****************
   428 ;; Defined at:
   429 ;;		line 18 in file "main.c"
   430 ;; Parameters:    Size  Location     Type
   431 ;;		None
   432 ;; Auto vars:     Size  Location     Type
   433 ;;  k               2   16[BANK0 ] int 
   434 ;; Return value:  Size  Location     Type
   435 ;;                  1    wreg      void 
   436 ;; Registers used:
   437 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   438 ;; Tracked objects:
   439 ;;		On entry : B00/0
   440 ;;		On exit  : 0/0
   441 ;;		Unchanged: 0/0
   442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   443 ;;      Params:         0       0       0       0       0
   444 ;;      Locals:         0       2       0       0       0
   445 ;;      Temps:          0       3       0       0       0
   446 ;;      Totals:         0       5       0       0       0
   447 ;;Total ram usage:        5 bytes
   448 ;; Hardware stack levels required when called:    2
   449 ;; This function calls:
   450 ;;		_sprintf
   451 ;; This function is called by:
   452 ;;		Startup code after reset
   453 ;; This function uses a non-reentrant model
   454 ;;
   455                           
   456                           
   457                           ;psect for function _main
   458  065D                     _main:
   459  065D                     l983:	
   460                           ;incstack = 0
   461                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   462                           
   463                           
   464                           ;main.c: 19:     TRISD = 0x00;
   465  065D  1683               	bsf	3,5	;RP0=1, select bank1
   466  065E  1303               	bcf	3,6	;RP1=0, select bank1
   467  065F  0188               	clrf	8	;volatile
   468                           
   469                           ;main.c: 20:     PORTD = 0x00;
   470  0660  1283               	bcf	3,5	;RP0=0, select bank0
   471  0661  1303               	bcf	3,6	;RP1=0, select bank0
   472  0662  0188               	clrf	8	;volatile
   473  0663                     l985:
   474                           
   475                           ;main.c: 22:     TRISA = 0xFF;
   476  0663  30FF               	movlw	255
   477  0664  1683               	bsf	3,5	;RP0=1, select bank1
   478  0665  1303               	bcf	3,6	;RP1=0, select bank1
   479  0666  0085               	movwf	5	;volatile
   480  0667                     l987:
   481                           
   482                           ;main.c: 23:     ADCON0bits.ADCS1 = 1;
   483  0667  1283               	bcf	3,5	;RP0=0, select bank0
   484  0668  1303               	bcf	3,6	;RP1=0, select bank0
   485  0669  179F               	bsf	31,7	;volatile
   486  066A                     l989:
   487                           
   488                           ;main.c: 24:     ADCON0bits.ADCS0 = 0;
   489  066A  131F               	bcf	31,6	;volatile
   490  066B                     l991:
   491                           
   492                           ;main.c: 26:     ADCON0bits.CHS2 = 0;
   493  066B  129F               	bcf	31,5	;volatile
   494  066C                     l993:
   495                           
   496                           ;main.c: 27:     ADCON0bits.CHS1 = 0;
   497  066C  121F               	bcf	31,4	;volatile
   498  066D                     l995:
   499                           
   500                           ;main.c: 28:     ADCON0bits.CHS0 = 0;
   501  066D  119F               	bcf	31,3	;volatile
   502  066E                     l997:
   503                           
   504                           ;main.c: 29:     ADCON1bits.ADFM = 1;
   505  066E  1683               	bsf	3,5	;RP0=1, select bank1
   506  066F  1303               	bcf	3,6	;RP1=0, select bank1
   507  0670  179F               	bsf	31,7	;volatile
   508  0671                     l999:
   509                           
   510                           ;main.c: 30:     ADCON1bits.ADCS2 = 1;
   511  0671  171F               	bsf	31,6	;volatile
   512  0672                     l1001:
   513                           
   514                           ;main.c: 32:     ADCON1bits.PCFG3 = 1;
   515  0672  159F               	bsf	31,3	;volatile
   516  0673                     l1003:
   517                           
   518                           ;main.c: 33:     ADCON1bits.PCFG2 = 1;
   519  0673  151F               	bsf	31,2	;volatile
   520  0674                     l1005:
   521                           
   522                           ;main.c: 34:     ADCON1bits.PCFG1 = 1;
   523  0674  149F               	bsf	31,1	;volatile
   524  0675                     l1007:
   525                           
   526                           ;main.c: 35:     ADCON1bits.PCFG0 = 0;
   527  0675  101F               	bcf	31,0	;volatile
   528  0676                     l1009:
   529                           
   530                           ;main.c: 36:     ADCON0bits.ADON = 1;
   531  0676  1283               	bcf	3,5	;RP0=0, select bank0
   532  0677  1303               	bcf	3,6	;RP1=0, select bank0
   533  0678  141F               	bsf	31,0	;volatile
   534  0679                     l1011:
   535                           
   536                           ;main.c: 37:     _delay((unsigned long)((20)*(20000000/4000000.0)));
   537  0679  3020               	movlw	32
   538  067A  1283               	bcf	3,5	;RP0=0, select bank0
   539  067B  1303               	bcf	3,6	;RP1=0, select bank0
   540  067C  00C5               	movwf	??_main
   541  067D                     u517:
   542  067D  0BC5               	decfsz	??_main,f
   543  067E  2E7D               	goto	u517
   544  067F  0000               	nop
   545  0680                     l1013:
   546                           
   547                           ;main.c: 40:     TRISC = 0xFF;
   548  0680  30FF               	movlw	255
   549  0681  1683               	bsf	3,5	;RP0=1, select bank1
   550  0682  1303               	bcf	3,6	;RP1=0, select bank1
   551  0683  0087               	movwf	7	;volatile
   552  0684                     l1015:
   553                           
   554                           ;main.c: 41:     SPBRG = 20;
   555  0684  3014               	movlw	20
   556  0685  0099               	movwf	25	;volatile
   557  0686                     l1017:
   558                           
   559                           ;main.c: 42:     TXSTAbits.BRGH = 1;
   560  0686  1518               	bsf	24,2	;volatile
   561  0687                     l1019:
   562                           
   563                           ;main.c: 43:     TXSTAbits.SYNC = 0;
   564  0687  1218               	bcf	24,4	;volatile
   565  0688                     l1021:
   566                           
   567                           ;main.c: 44:     RCSTAbits.SPEN = 1;
   568  0688  1283               	bcf	3,5	;RP0=0, select bank0
   569  0689  1303               	bcf	3,6	;RP1=0, select bank0
   570  068A  1798               	bsf	24,7	;volatile
   571  068B                     l1023:
   572                           
   573                           ;main.c: 45:     PIE1bits.TXIE = 0;
   574  068B  1683               	bsf	3,5	;RP0=1, select bank1
   575  068C  1303               	bcf	3,6	;RP1=0, select bank1
   576  068D  120C               	bcf	12,4	;volatile
   577  068E                     l1025:
   578                           
   579                           ;main.c: 46:     TXSTAbits.TX9 = 0;
   580  068E  1318               	bcf	24,6	;volatile
   581  068F                     l1027:
   582                           
   583                           ;main.c: 47:     TXSTAbits.TXEN = 1;
   584  068F  1698               	bsf	24,5	;volatile
   585                           
   586                           ;main.c: 49:     int k;;main.c: 50:     for(k = 0; txt[k] != '\0' ; k++) {
   587  0690  1283               	bcf	3,5	;RP0=0, select bank0
   588  0691  1303               	bcf	3,6	;RP1=0, select bank0
   589  0692  01C8               	clrf	main@k
   590  0693  01C9               	clrf	main@k+1
   591  0694  2EA9               	goto	l1033
   592  0695                     l41:
   593  0695  1683               	bsf	3,5	;RP0=1, select bank1
   594  0696  1303               	bcf	3,6	;RP1=0, select bank1
   595  0697  1C98               	btfss	24,1	;volatile
   596  0698  2E9A               	goto	u461
   597  0699  2E9B               	goto	u460
   598  069A                     u461:
   599  069A  2E95               	goto	l41
   600  069B                     u460:
   601  069B                     l1029:
   602                           
   603                           ;main.c: 52:         TXREG = txt[k];
   604  069B  1283               	bcf	3,5	;RP0=0, select bank0
   605  069C  1303               	bcf	3,6	;RP1=0, select bank0
   606  069D  0848               	movf	main@k,w
   607  069E  3E20               	addlw	(low (_txt| 0))& (0+255)
   608  069F  0084               	movwf	4
   609  06A0  1383               	bcf	3,7	;select IRP bank0
   610  06A1  0800               	movf	0,w
   611  06A2  0099               	movwf	25	;volatile
   612  06A3                     l1031:
   613                           
   614                           ;main.c: 53:     }
   615  06A3  3001               	movlw	1
   616  06A4  07C8               	addwf	main@k,f
   617  06A5  1803               	skipnc
   618  06A6  0AC9               	incf	main@k+1,f
   619  06A7  3000               	movlw	0
   620  06A8  07C9               	addwf	main@k+1,f
   621  06A9                     l1033:
   622  06A9  0848               	movf	main@k,w
   623  06AA  3E20               	addlw	(low (_txt| 0))& (0+255)
   624  06AB  0084               	movwf	4
   625  06AC  1383               	bcf	3,7	;select IRP bank0
   626  06AD  0800               	movf	0,w
   627  06AE  1D03               	btfss	3,2
   628  06AF  2EB1               	goto	u471
   629  06B0  2EB2               	goto	u470
   630  06B1                     u471:
   631  06B1  2E95               	goto	l41
   632  06B2                     u470:
   633  06B2                     l45:	
   634                           ;main.c: 55:     while(1) {
   635                           
   636                           
   637                           ;main.c: 56:         ADCON0bits.GO_nDONE = 1;
   638  06B2  1283               	bcf	3,5	;RP0=0, select bank0
   639  06B3  1303               	bcf	3,6	;RP1=0, select bank0
   640  06B4  151F               	bsf	31,2	;volatile
   641  06B5                     l46:	
   642                           ;main.c: 57:         while(ADCON0bits.GO_nDONE);
   643                           
   644  06B5  191F               	btfsc	31,2	;volatile
   645  06B6  2EB8               	goto	u481
   646  06B7  2EB9               	goto	u480
   647  06B8                     u481:
   648  06B8  2EB5               	goto	l46
   649  06B9                     u480:
   650  06B9                     l1035:
   651                           
   652                           ;main.c: 58:         adc_data = (ADRESH << 8) + ADRESL;
   653  06B9  081E               	movf	30,w	;volatile
   654  06BA  00CB               	movwf	_adc_data+1
   655  06BB  1683               	bsf	3,5	;RP0=1, select bank1
   656  06BC  1303               	bcf	3,6	;RP1=0, select bank1
   657  06BD  081E               	movf	30,w	;volatile
   658  06BE  1283               	bcf	3,5	;RP0=0, select bank0
   659  06BF  1303               	bcf	3,6	;RP1=0, select bank0
   660  06C0  00CA               	movwf	_adc_data
   661  06C1                     l1037:
   662                           
   663                           ;main.c: 59:         sprintf(txt, "Adc Value = %d\r\n", adc_data);
   664  06C1  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   665  06C2  00C5               	movwf	??_main
   666  06C3  0845               	movf	??_main,w
   667  06C4  00B8               	movwf	sprintf@f
   668  06C5  084B               	movf	_adc_data+1,w
   669  06C6  00BA               	movwf	?_sprintf+2
   670  06C7  084A               	movf	_adc_data,w
   671  06C8  00B9               	movwf	?_sprintf+1
   672  06C9  3020               	movlw	(low (_txt| 0))& (0+255)
   673  06CA  120A  118A  2704  120A  118A  	fcall	_sprintf
   674  06CF                     l1039:
   675                           
   676                           ;main.c: 60:         for(k = 0; txt[k] != '\0' ; k++) {
   677  06CF  1283               	bcf	3,5	;RP0=0, select bank0
   678  06D0  1303               	bcf	3,6	;RP1=0, select bank0
   679  06D1  01C8               	clrf	main@k
   680  06D2  01C9               	clrf	main@k+1
   681  06D3  2EE8               	goto	l1045
   682  06D4                     l51:
   683  06D4  1683               	bsf	3,5	;RP0=1, select bank1
   684  06D5  1303               	bcf	3,6	;RP1=0, select bank1
   685  06D6  1C98               	btfss	24,1	;volatile
   686  06D7  2ED9               	goto	u491
   687  06D8  2EDA               	goto	u490
   688  06D9                     u491:
   689  06D9  2ED4               	goto	l51
   690  06DA                     u490:
   691  06DA                     l1041:
   692                           
   693                           ;main.c: 62:             TXREG = txt[k];
   694  06DA  1283               	bcf	3,5	;RP0=0, select bank0
   695  06DB  1303               	bcf	3,6	;RP1=0, select bank0
   696  06DC  0848               	movf	main@k,w
   697  06DD  3E20               	addlw	(low (_txt| 0))& (0+255)
   698  06DE  0084               	movwf	4
   699  06DF  1383               	bcf	3,7	;select IRP bank0
   700  06E0  0800               	movf	0,w
   701  06E1  0099               	movwf	25	;volatile
   702  06E2                     l1043:
   703                           
   704                           ;main.c: 63:         }
   705  06E2  3001               	movlw	1
   706  06E3  07C8               	addwf	main@k,f
   707  06E4  1803               	skipnc
   708  06E5  0AC9               	incf	main@k+1,f
   709  06E6  3000               	movlw	0
   710  06E7  07C9               	addwf	main@k+1,f
   711  06E8                     l1045:
   712  06E8  0848               	movf	main@k,w
   713  06E9  3E20               	addlw	(low (_txt| 0))& (0+255)
   714  06EA  0084               	movwf	4
   715  06EB  1383               	bcf	3,7	;select IRP bank0
   716  06EC  0800               	movf	0,w
   717  06ED  1D03               	btfss	3,2
   718  06EE  2EF0               	goto	u501
   719  06EF  2EF1               	goto	u500
   720  06F0                     u501:
   721  06F0  2ED4               	goto	l51
   722  06F1                     u500:
   723  06F1                     l1047:
   724                           
   725                           ;main.c: 64:         _delay((unsigned long)((500)*(20000000/4000.0)));
   726  06F1  300D               	movlw	13
   727  06F2  1283               	bcf	3,5	;RP0=0, select bank0
   728  06F3  1303               	bcf	3,6	;RP1=0, select bank0
   729  06F4  00C7               	movwf	??_main+2
   730  06F5  30AF               	movlw	175
   731  06F6  00C6               	movwf	??_main+1
   732  06F7  30B5               	movlw	181
   733  06F8  00C5               	movwf	??_main
   734  06F9                     u527:
   735  06F9  0BC5               	decfsz	??_main,f
   736  06FA  2EF9               	goto	u527
   737  06FB  0BC6               	decfsz	??_main+1,f
   738  06FC  2EF9               	goto	u527
   739  06FD  0BC7               	decfsz	??_main+2,f
   740  06FE  2EF9               	goto	u527
   741  06FF  2F00               	nop2
   742  0700  2EB2               	goto	l45
   743  0701  120A  118A  2800   	ljmp	start
   744  0704                     __end_of_main:
   745                           
   746                           	psect	text1
   747  0704                     __ptext1:	
   748 ;; *************** function _sprintf *****************
   749 ;; Defined at:
   750 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
   751 ;; Parameters:    Size  Location     Type
   752 ;;  sp              1    wreg     PTR unsigned char 
   753 ;;		 -> txt(24), 
   754 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   755 ;;		 -> STR_1(17), 
   756 ;; Auto vars:     Size  Location     Type
   757 ;;  sp              1   11[BANK0 ] PTR unsigned char 
   758 ;;		 -> txt(24), 
   759 ;;  tmpval          4    0        struct .
   760 ;;  val             2    9[BANK0 ] unsigned int 
   761 ;;  cp              2    0        PTR const unsigned char 
   762 ;;  len             2    0        unsigned int 
   763 ;;  c               1   12[BANK0 ] unsigned char 
   764 ;;  prec            1    8[BANK0 ] char 
   765 ;;  flag            1    7[BANK0 ] unsigned char 
   766 ;;  ap              1    6[BANK0 ] PTR void [1]
   767 ;;		 -> ?_sprintf(2), 
   768 ;; Return value:  Size  Location     Type
   769 ;;                  2    0[BANK0 ] int 
   770 ;; Registers used:
   771 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   772 ;; Tracked objects:
   773 ;;		On entry : 0/0
   774 ;;		On exit  : 0/0
   775 ;;		Unchanged: 0/0
   776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   777 ;;      Params:         0       3       0       0       0
   778 ;;      Locals:         0       7       0       0       0
   779 ;;      Temps:          0       3       0       0       0
   780 ;;      Totals:         0      13       0       0       0
   781 ;;Total ram usage:       13 bytes
   782 ;; Hardware stack levels used:    1
   783 ;; Hardware stack levels required when called:    1
   784 ;; This function calls:
   785 ;;		___lwdiv
   786 ;;		___lwmod
   787 ;; This function is called by:
   788 ;;		_main
   789 ;; This function uses a non-reentrant model
   790 ;;
   791                           
   792                           
   793                           ;psect for function _sprintf
   794  0704                     _sprintf:
   795                           
   796                           ;incstack = 0
   797                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   798                           ;sprintf@sp stored from wreg
   799  0704  1283               	bcf	3,5	;RP0=0, select bank0
   800  0705  1303               	bcf	3,6	;RP1=0, select bank0
   801  0706  00C3               	movwf	sprintf@sp
   802  0707                     l921:
   803                           
   804                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   805  0707  3039               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   806  0708  00BB               	movwf	??_sprintf
   807  0709  083B               	movf	??_sprintf,w
   808  070A  00BE               	movwf	sprintf@ap
   809                           
   810                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   811  070B  2FD5               	goto	l973
   812  070C                     l923:
   813                           
   814                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   815  070C  3025               	movlw	37
   816  070D  0644               	xorwf	sprintf@c,w
   817  070E  1903               	btfsc	3,2
   818  070F  2F11               	goto	u391
   819  0710  2F12               	goto	u390
   820  0711                     u391:
   821  0711  2F1E               	goto	l929
   822  0712                     u390:
   823  0712                     l925:
   824                           
   825                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   826  0712  0844               	movf	sprintf@c,w
   827  0713  00BB               	movwf	??_sprintf
   828  0714  0843               	movf	sprintf@sp,w
   829  0715  0084               	movwf	4
   830  0716  083B               	movf	??_sprintf,w
   831  0717  1383               	bcf	3,7	;select IRP bank0
   832  0718  0080               	movwf	0
   833  0719                     l927:
   834  0719  3001               	movlw	1
   835  071A  00BB               	movwf	??_sprintf
   836  071B  083B               	movf	??_sprintf,w
   837  071C  07C3               	addwf	sprintf@sp,f
   838                           
   839                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
   840  071D  2FD5               	goto	l973
   841  071E                     l929:
   842                           
   843                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   844  071E  01BF               	clrf	sprintf@flag
   845  071F                     l933:	
   846                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   847                           
   848  071F  3001               	movlw	1
   849  0720  07B8               	addwf	sprintf@f,f
   850  0721  30FF               	movlw	-1
   851  0722  0738               	addwf	sprintf@f,w
   852  0723  0084               	movwf	4
   853  0724  120A  118A  2003  120A  118A  	fcall	stringdir
   854  0729  00C4               	movwf	sprintf@c
   855  072A  00BB               	movwf	??_sprintf
   856  072B  01BC               	clrf	??_sprintf+1
   857                           
   858                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   859                           ; Switch size 1, requested type "simple"
   860                           ; Number of cases is 1, Range of values is 0 to 0
   861                           ; switch strategies available:
   862                           ; Name         Instructions Cycles
   863                           ; simple_byte            4     3 (average)
   864                           ; direct_byte           11     8 (fixed)
   865                           ; jumptable            260     6 (fixed)
   866                           ;	Chosen strategy is simple_byte
   867  072C  083C               	movf	??_sprintf+1,w
   868  072D  3A00               	xorlw	0	; case 0
   869  072E  1903               	skipnz
   870  072F  2F31               	goto	l1069
   871  0730  2FD5               	goto	l973
   872  0731                     l1069:
   873                           
   874                           ; Switch size 1, requested type "simple"
   875                           ; Number of cases is 3, Range of values is 0 to 105
   876                           ; switch strategies available:
   877                           ; Name         Instructions Cycles
   878                           ; simple_byte           10     6 (average)
   879                           ; jumptable            260     6 (fixed)
   880                           ;	Chosen strategy is simple_byte
   881  0731  083B               	movf	??_sprintf,w
   882  0732  3A00               	xorlw	0	; case 0
   883  0733  1903               	skipnz
   884  0734  2FE7               	goto	l975
   885  0735  3A64               	xorlw	100	; case 100
   886  0736  1903               	skipnz
   887  0737  2F3C               	goto	l935
   888  0738  3A0D               	xorlw	13	; case 105
   889  0739  1903               	skipnz
   890  073A  2F3C               	goto	l935
   891  073B  2FD5               	goto	l973
   892  073C                     l935:
   893                           
   894                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
   895  073C  083E               	movf	sprintf@ap,w
   896  073D  0084               	movwf	4
   897  073E  1383               	bcf	3,7	;select IRP bank0
   898  073F  0800               	movf	0,w
   899  0740  00C1               	movwf	sprintf@val
   900  0741  0A84               	incf	4,f
   901  0742  0800               	movf	0,w
   902  0743  00C2               	movwf	sprintf@val+1
   903  0744                     l937:
   904  0744  3002               	movlw	2
   905  0745  00BB               	movwf	??_sprintf
   906  0746  083B               	movf	??_sprintf,w
   907  0747  07BE               	addwf	sprintf@ap,f
   908  0748                     l939:
   909                           
   910                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
   911  0748  1FC2               	btfss	sprintf@val+1,7
   912  0749  2F4B               	goto	u401
   913  074A  2F4C               	goto	u400
   914  074B                     u401:
   915  074B  2F55               	goto	l945
   916  074C                     u400:
   917  074C                     l941:
   918                           
   919                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
   920  074C  3003               	movlw	3
   921  074D  00BB               	movwf	??_sprintf
   922  074E  083B               	movf	??_sprintf,w
   923  074F  04BF               	iorwf	sprintf@flag,f
   924  0750                     l943:
   925                           
   926                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
   927  0750  09C1               	comf	sprintf@val,f
   928  0751  09C2               	comf	sprintf@val+1,f
   929  0752  0AC1               	incf	sprintf@val,f
   930  0753  1903               	skipnz
   931  0754  0AC2               	incf	sprintf@val+1,f
   932  0755                     l945:
   933                           
   934                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
   935  0755  01C4               	clrf	sprintf@c
   936  0756  0AC4               	incf	sprintf@c,f
   937  0757                     l951:
   938                           
   939                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
   940  0757  0844               	movf	sprintf@c,w
   941  0758  00BB               	movwf	??_sprintf
   942  0759  073B               	addwf	??_sprintf,w
   943  075A  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   944  075B  0084               	movwf	4
   945  075C  120A  118A  2003  120A  118A  	fcall	stringdir
   946  0761  00BC               	movwf	??_sprintf+1
   947  0762  120A  118A  2003  120A  118A  	fcall	stringdir
   948  0767  00BD               	movwf	??_sprintf+2
   949  0768  083D               	movf	??_sprintf+2,w
   950  0769  0242               	subwf	sprintf@val+1,w
   951  076A  1D03               	skipz
   952  076B  2F6E               	goto	u415
   953  076C  083C               	movf	??_sprintf+1,w
   954  076D  0241               	subwf	sprintf@val,w
   955  076E                     u415:
   956  076E  1803               	skipnc
   957  076F  2F71               	goto	u411
   958  0770  2F72               	goto	u410
   959  0771                     u411:
   960  0771  2F73               	goto	l955
   961  0772                     u410:
   962  0772  2F7D               	goto	l957
   963  0773                     l955:
   964  0773  3001               	movlw	1
   965  0774  00BB               	movwf	??_sprintf
   966  0775  083B               	movf	??_sprintf,w
   967  0776  07C4               	addwf	sprintf@c,f
   968  0777  3005               	movlw	5
   969  0778  0644               	xorwf	sprintf@c,w
   970  0779  1D03               	btfss	3,2
   971  077A  2F7C               	goto	u421
   972  077B  2F7D               	goto	u420
   973  077C                     u421:
   974  077C  2F57               	goto	l951
   975  077D                     u420:
   976  077D                     l957:
   977                           
   978                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
   979  077D  083F               	movf	sprintf@flag,w
   980  077E  3903               	andlw	3
   981  077F  1903               	btfsc	3,2
   982  0780  2F82               	goto	u431
   983  0781  2F83               	goto	u430
   984  0782                     u431:
   985  0782  2F8E               	goto	l963
   986  0783                     u430:
   987  0783                     l959:
   988                           
   989                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
   990  0783  302D               	movlw	45
   991  0784  00BB               	movwf	??_sprintf
   992  0785  0843               	movf	sprintf@sp,w
   993  0786  0084               	movwf	4
   994  0787  083B               	movf	??_sprintf,w
   995  0788  1383               	bcf	3,7	;select IRP bank0
   996  0789  0080               	movwf	0
   997  078A                     l961:
   998  078A  3001               	movlw	1
   999  078B  00BB               	movwf	??_sprintf
  1000  078C  083B               	movf	??_sprintf,w
  1001  078D  07C3               	addwf	sprintf@sp,f
  1002  078E                     l963:
  1003                           
  1004                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1005  078E  0844               	movf	sprintf@c,w
  1006  078F  00BB               	movwf	??_sprintf
  1007  0790  083B               	movf	??_sprintf,w
  1008  0791  00C0               	movwf	sprintf@prec
  1009                           
  1010                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1011  0792  2FCC               	goto	l971
  1012  0793                     l965:
  1013                           
  1014                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1015  0793  300A               	movlw	10
  1016  0794  00F8               	movwf	___lwmod@divisor
  1017  0795  3000               	movlw	0
  1018  0796  00F9               	movwf	___lwmod@divisor+1
  1019  0797  0840               	movf	sprintf@prec,w
  1020  0798  00BB               	movwf	??_sprintf
  1021  0799  073B               	addwf	??_sprintf,w
  1022  079A  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1023  079B  0084               	movwf	4
  1024  079C  120A  118A  2003  120A  118A  	fcall	stringdir
  1025  07A1  00F0               	movwf	___lwdiv@divisor
  1026  07A2  120A  118A  2003  120A  118A  	fcall	stringdir
  1027  07A7  00F1               	movwf	___lwdiv@divisor+1
  1028  07A8  0842               	movf	sprintf@val+1,w
  1029  07A9  00F3               	movwf	___lwdiv@dividend+1
  1030  07AA  0841               	movf	sprintf@val,w
  1031  07AB  00F2               	movwf	___lwdiv@dividend
  1032  07AC  120A  118A  2619  120A  118A  	fcall	___lwdiv
  1033  07B1  0871               	movf	?___lwdiv+1,w
  1034  07B2  00FB               	movwf	___lwmod@dividend+1
  1035  07B3  0870               	movf	?___lwdiv,w
  1036  07B4  00FA               	movwf	___lwmod@dividend
  1037  07B5  120A  118A  25DF  120A  118A  	fcall	___lwmod
  1038  07BA  0878               	movf	?___lwmod,w
  1039  07BB  3E30               	addlw	48
  1040  07BC  1283               	bcf	3,5	;RP0=0, select bank0
  1041  07BD  1303               	bcf	3,6	;RP1=0, select bank0
  1042  07BE  00BC               	movwf	??_sprintf+1
  1043  07BF  083C               	movf	??_sprintf+1,w
  1044  07C0  00C4               	movwf	sprintf@c
  1045  07C1                     l967:
  1046                           
  1047                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1048  07C1  0844               	movf	sprintf@c,w
  1049  07C2  00BB               	movwf	??_sprintf
  1050  07C3  0843               	movf	sprintf@sp,w
  1051  07C4  0084               	movwf	4
  1052  07C5  083B               	movf	??_sprintf,w
  1053  07C6  1383               	bcf	3,7	;select IRP bank0
  1054  07C7  0080               	movwf	0
  1055  07C8                     l969:
  1056  07C8  3001               	movlw	1
  1057  07C9  00BB               	movwf	??_sprintf
  1058  07CA  083B               	movf	??_sprintf,w
  1059  07CB  07C3               	addwf	sprintf@sp,f
  1060  07CC                     l971:
  1061                           
  1062                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1063  07CC  30FF               	movlw	255
  1064  07CD  00BB               	movwf	??_sprintf
  1065  07CE  083B               	movf	??_sprintf,w
  1066  07CF  07C0               	addwf	sprintf@prec,f
  1067  07D0  0A40               	incf	sprintf@prec,w
  1068  07D1  1D03               	btfss	3,2
  1069  07D2  2FD4               	goto	u441
  1070  07D3  2FD5               	goto	u440
  1071  07D4                     u441:
  1072  07D4  2F93               	goto	l965
  1073  07D5                     u440:
  1074  07D5                     l973:
  1075                           
  1076                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1077  07D5  3001               	movlw	1
  1078  07D6  07B8               	addwf	sprintf@f,f
  1079  07D7  30FF               	movlw	-1
  1080  07D8  0738               	addwf	sprintf@f,w
  1081  07D9  0084               	movwf	4
  1082  07DA  120A  118A  2003  120A  118A  	fcall	stringdir
  1083  07DF  00BB               	movwf	??_sprintf
  1084  07E0  083B               	movf	??_sprintf,w
  1085  07E1  00C4               	movwf	sprintf@c
  1086  07E2  0844               	movf	sprintf@c,w
  1087  07E3  1D03               	btfss	3,2
  1088  07E4  2FE6               	goto	u451
  1089  07E5  2FE7               	goto	u450
  1090  07E6                     u451:
  1091  07E6  2F0C               	goto	l923
  1092  07E7                     u450:
  1093  07E7                     l975:
  1094                           
  1095                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1096  07E7  0843               	movf	sprintf@sp,w
  1097  07E8  0084               	movwf	4
  1098  07E9  1383               	bcf	3,7	;select IRP bank0
  1099  07EA  0180               	clrf	0
  1100  07EB                     l167:
  1101  07EB  0008               	return
  1102  07EC                     __end_of_sprintf:
  1103                           
  1104                           	psect	text2
  1105  05DF                     __ptext2:	
  1106 ;; *************** function ___lwmod *****************
  1107 ;; Defined at:
  1108 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  1109 ;; Parameters:    Size  Location     Type
  1110 ;;  divisor         2    8[COMMON] unsigned int 
  1111 ;;  dividend        2   10[COMMON] unsigned int 
  1112 ;; Auto vars:     Size  Location     Type
  1113 ;;  counter         1   13[COMMON] unsigned char 
  1114 ;; Return value:  Size  Location     Type
  1115 ;;                  2    8[COMMON] unsigned int 
  1116 ;; Registers used:
  1117 ;;		wreg, status,2, status,0
  1118 ;; Tracked objects:
  1119 ;;		On entry : 0/0
  1120 ;;		On exit  : 0/0
  1121 ;;		Unchanged: 0/0
  1122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1123 ;;      Params:         4       0       0       0       0
  1124 ;;      Locals:         1       0       0       0       0
  1125 ;;      Temps:          1       0       0       0       0
  1126 ;;      Totals:         6       0       0       0       0
  1127 ;;Total ram usage:        6 bytes
  1128 ;; Hardware stack levels used:    1
  1129 ;; This function calls:
  1130 ;;		Nothing
  1131 ;; This function is called by:
  1132 ;;		_sprintf
  1133 ;; This function uses a non-reentrant model
  1134 ;;
  1135                           
  1136                           
  1137                           ;psect for function ___lwmod
  1138  05DF                     ___lwmod:
  1139  05DF                     l899:	
  1140                           ;incstack = 0
  1141                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1142                           
  1143  05DF  0878               	movf	___lwmod@divisor,w
  1144  05E0  0479               	iorwf	___lwmod@divisor+1,w
  1145  05E1  1903               	btfsc	3,2
  1146  05E2  2DE4               	goto	u331
  1147  05E3  2DE5               	goto	u330
  1148  05E4                     u331:
  1149  05E4  2E14               	goto	l917
  1150  05E5                     u330:
  1151  05E5                     l901:
  1152  05E5  01FD               	clrf	___lwmod@counter
  1153  05E6  0AFD               	incf	___lwmod@counter,f
  1154  05E7  2DF3               	goto	l907
  1155  05E8                     l903:
  1156  05E8  3001               	movlw	1
  1157  05E9                     u345:
  1158  05E9  1003               	clrc
  1159  05EA  0DF8               	rlf	___lwmod@divisor,f
  1160  05EB  0DF9               	rlf	___lwmod@divisor+1,f
  1161  05EC  3EFF               	addlw	-1
  1162  05ED  1D03               	skipz
  1163  05EE  2DE9               	goto	u345
  1164  05EF                     l905:
  1165  05EF  3001               	movlw	1
  1166  05F0  00FC               	movwf	??___lwmod
  1167  05F1  087C               	movf	??___lwmod,w
  1168  05F2  07FD               	addwf	___lwmod@counter,f
  1169  05F3                     l907:
  1170  05F3  1FF9               	btfss	___lwmod@divisor+1,7
  1171  05F4  2DF6               	goto	u351
  1172  05F5  2DF7               	goto	u350
  1173  05F6                     u351:
  1174  05F6  2DE8               	goto	l903
  1175  05F7                     u350:
  1176  05F7                     l909:
  1177  05F7  0879               	movf	___lwmod@divisor+1,w
  1178  05F8  027B               	subwf	___lwmod@dividend+1,w
  1179  05F9  1D03               	skipz
  1180  05FA  2DFD               	goto	u365
  1181  05FB  0878               	movf	___lwmod@divisor,w
  1182  05FC  027A               	subwf	___lwmod@dividend,w
  1183  05FD                     u365:
  1184  05FD  1C03               	skipc
  1185  05FE  2E00               	goto	u361
  1186  05FF  2E01               	goto	u360
  1187  0600                     u361:
  1188  0600  2E07               	goto	l913
  1189  0601                     u360:
  1190  0601                     l911:
  1191  0601  0878               	movf	___lwmod@divisor,w
  1192  0602  02FA               	subwf	___lwmod@dividend,f
  1193  0603  0879               	movf	___lwmod@divisor+1,w
  1194  0604  1C03               	skipc
  1195  0605  03FB               	decf	___lwmod@dividend+1,f
  1196  0606  02FB               	subwf	___lwmod@dividend+1,f
  1197  0607                     l913:
  1198  0607  3001               	movlw	1
  1199  0608                     u375:
  1200  0608  1003               	clrc
  1201  0609  0CF9               	rrf	___lwmod@divisor+1,f
  1202  060A  0CF8               	rrf	___lwmod@divisor,f
  1203  060B  3EFF               	addlw	-1
  1204  060C  1D03               	skipz
  1205  060D  2E08               	goto	u375
  1206  060E                     l915:
  1207  060E  3001               	movlw	1
  1208  060F  02FD               	subwf	___lwmod@counter,f
  1209  0610  1D03               	btfss	3,2
  1210  0611  2E13               	goto	u381
  1211  0612  2E14               	goto	u380
  1212  0613                     u381:
  1213  0613  2DF7               	goto	l909
  1214  0614                     u380:
  1215  0614                     l917:
  1216  0614  087B               	movf	___lwmod@dividend+1,w
  1217  0615  00F9               	movwf	?___lwmod+1
  1218  0616  087A               	movf	___lwmod@dividend,w
  1219  0617  00F8               	movwf	?___lwmod
  1220  0618                     l453:
  1221  0618  0008               	return
  1222  0619                     __end_of___lwmod:
  1223                           
  1224                           	psect	text3
  1225  0619                     __ptext3:	
  1226 ;; *************** function ___lwdiv *****************
  1227 ;; Defined at:
  1228 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  1229 ;; Parameters:    Size  Location     Type
  1230 ;;  divisor         2    0[COMMON] unsigned int 
  1231 ;;  dividend        2    2[COMMON] unsigned int 
  1232 ;; Auto vars:     Size  Location     Type
  1233 ;;  quotient        2    5[COMMON] unsigned int 
  1234 ;;  counter         1    7[COMMON] unsigned char 
  1235 ;; Return value:  Size  Location     Type
  1236 ;;                  2    0[COMMON] unsigned int 
  1237 ;; Registers used:
  1238 ;;		wreg, status,2, status,0
  1239 ;; Tracked objects:
  1240 ;;		On entry : 0/0
  1241 ;;		On exit  : 0/0
  1242 ;;		Unchanged: 0/0
  1243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1244 ;;      Params:         4       0       0       0       0
  1245 ;;      Locals:         3       0       0       0       0
  1246 ;;      Temps:          1       0       0       0       0
  1247 ;;      Totals:         8       0       0       0       0
  1248 ;;Total ram usage:        8 bytes
  1249 ;; Hardware stack levels used:    1
  1250 ;; This function calls:
  1251 ;;		Nothing
  1252 ;; This function is called by:
  1253 ;;		_sprintf
  1254 ;; This function uses a non-reentrant model
  1255 ;;
  1256                           
  1257                           
  1258                           ;psect for function ___lwdiv
  1259  0619                     ___lwdiv:
  1260  0619                     l873:	
  1261                           ;incstack = 0
  1262                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1263                           
  1264  0619  01F5               	clrf	___lwdiv@quotient
  1265  061A  01F6               	clrf	___lwdiv@quotient+1
  1266  061B                     l875:
  1267  061B  0870               	movf	___lwdiv@divisor,w
  1268  061C  0471               	iorwf	___lwdiv@divisor+1,w
  1269  061D  1903               	btfsc	3,2
  1270  061E  2E20               	goto	u261
  1271  061F  2E21               	goto	u260
  1272  0620                     u261:
  1273  0620  2E58               	goto	l895
  1274  0621                     u260:
  1275  0621                     l877:
  1276  0621  01F7               	clrf	___lwdiv@counter
  1277  0622  0AF7               	incf	___lwdiv@counter,f
  1278  0623  2E2F               	goto	l883
  1279  0624                     l879:
  1280  0624  3001               	movlw	1
  1281  0625                     u275:
  1282  0625  1003               	clrc
  1283  0626  0DF0               	rlf	___lwdiv@divisor,f
  1284  0627  0DF1               	rlf	___lwdiv@divisor+1,f
  1285  0628  3EFF               	addlw	-1
  1286  0629  1D03               	skipz
  1287  062A  2E25               	goto	u275
  1288  062B                     l881:
  1289  062B  3001               	movlw	1
  1290  062C  00F4               	movwf	??___lwdiv
  1291  062D  0874               	movf	??___lwdiv,w
  1292  062E  07F7               	addwf	___lwdiv@counter,f
  1293  062F                     l883:
  1294  062F  1FF1               	btfss	___lwdiv@divisor+1,7
  1295  0630  2E32               	goto	u281
  1296  0631  2E33               	goto	u280
  1297  0632                     u281:
  1298  0632  2E24               	goto	l879
  1299  0633                     u280:
  1300  0633                     l885:
  1301  0633  3001               	movlw	1
  1302  0634                     u295:
  1303  0634  1003               	clrc
  1304  0635  0DF5               	rlf	___lwdiv@quotient,f
  1305  0636  0DF6               	rlf	___lwdiv@quotient+1,f
  1306  0637  3EFF               	addlw	-1
  1307  0638  1D03               	skipz
  1308  0639  2E34               	goto	u295
  1309  063A  0871               	movf	___lwdiv@divisor+1,w
  1310  063B  0273               	subwf	___lwdiv@dividend+1,w
  1311  063C  1D03               	skipz
  1312  063D  2E40               	goto	u305
  1313  063E  0870               	movf	___lwdiv@divisor,w
  1314  063F  0272               	subwf	___lwdiv@dividend,w
  1315  0640                     u305:
  1316  0640  1C03               	skipc
  1317  0641  2E43               	goto	u301
  1318  0642  2E44               	goto	u300
  1319  0643                     u301:
  1320  0643  2E4B               	goto	l891
  1321  0644                     u300:
  1322  0644                     l887:
  1323  0644  0870               	movf	___lwdiv@divisor,w
  1324  0645  02F2               	subwf	___lwdiv@dividend,f
  1325  0646  0871               	movf	___lwdiv@divisor+1,w
  1326  0647  1C03               	skipc
  1327  0648  03F3               	decf	___lwdiv@dividend+1,f
  1328  0649  02F3               	subwf	___lwdiv@dividend+1,f
  1329  064A                     l889:
  1330  064A  1475               	bsf	___lwdiv@quotient,0
  1331  064B                     l891:
  1332  064B  3001               	movlw	1
  1333  064C                     u315:
  1334  064C  1003               	clrc
  1335  064D  0CF1               	rrf	___lwdiv@divisor+1,f
  1336  064E  0CF0               	rrf	___lwdiv@divisor,f
  1337  064F  3EFF               	addlw	-1
  1338  0650  1D03               	skipz
  1339  0651  2E4C               	goto	u315
  1340  0652                     l893:
  1341  0652  3001               	movlw	1
  1342  0653  02F7               	subwf	___lwdiv@counter,f
  1343  0654  1D03               	btfss	3,2
  1344  0655  2E57               	goto	u321
  1345  0656  2E58               	goto	u320
  1346  0657                     u321:
  1347  0657  2E33               	goto	l885
  1348  0658                     u320:
  1349  0658                     l895:
  1350  0658  0876               	movf	___lwdiv@quotient+1,w
  1351  0659  00F1               	movwf	?___lwdiv+1
  1352  065A  0875               	movf	___lwdiv@quotient,w
  1353  065B  00F0               	movwf	?___lwdiv
  1354  065C                     l443:
  1355  065C  0008               	return
  1356  065D                     __end_of___lwdiv:
  1357  007E                     btemp	set	126	;btemp
  1358  007E                     wtemp0	set	126
  1359                           
  1360                           	psect	config
  1361                           
  1362                           ;Config register CONFIG @ 0x2007
  1363                           ;	Oscillator Selection bits
  1364                           ;	FOSC = HS, HS oscillator
  1365                           ;	Watchdog Timer Enable bit
  1366                           ;	WDTE = OFF, WDT disabled
  1367                           ;	Power-up Timer Enable bit
  1368                           ;	PWRTE = OFF, PWRT disabled
  1369                           ;	Brown-out Reset Enable bit
  1370                           ;	BOREN = OFF, BOR disabled
  1371                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1372                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1373                           ;	Data EEPROM Memory Code Protection bit
  1374                           ;	CPD = OFF, Data EEPROM code protection off
  1375                           ;	Flash Program Memory Write Enable bits
  1376                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1377                           ;	In-Circuit Debugger Mode bit
  1378                           ;	DEBUG = 0x1, unprogrammed default
  1379                           ;	Flash Program Memory Code Protection bit
  1380                           ;	CP = OFF, Code protection off
  1381  2007                     	org	8199
  1382  2007  3F3A               	dw	16186

Data Sizes:
    Strings     17
    Constant    10
    Data        24
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     18      44
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_1(CODE[17]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 24
		 -> txt(BANK0[24]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    1303
                                             13 BANK0      5     5      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1211
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     12      2C       5       55.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3A      12        0.0%
ABS                  0      0      3A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Fri Jan 29 14:37:23 2021

                      pc 0002                       l41 0695                       l51 06D4  
                     l45 06B2                       l46 06B5                       fsr 0004  
                    l167 07EB                      l443 065C                      l453 0618  
                    l901 05E5                      l911 0601                      l903 05E8  
                    l913 0607                      l905 05EF                      l921 0707  
                    l915 060E                      l907 05F3                      l923 070C  
                    l909 05F7                      l917 0614                      l941 074C  
                    l933 071F                      l925 0712                      l951 0757  
                    l943 0750                      l935 073C                      l927 0719  
                    l881 062B                      l873 0619                      l961 078A  
                    l945 0755                      l937 0744                      l929 071E  
                    l891 064B                      l883 062F                      l875 061B  
                    l971 07CC                      l963 078E                      l955 0773  
                    l939 0748                      l893 0652                      l885 0633  
                    l877 0621                      l965 0793                      l957 077D  
                    l973 07D5                      l887 0644                      l879 0624  
                    l895 0658                      l967 07C1                      l959 0783  
                    l975 07E7                      l991 066B                      l983 065D  
                    l889 064A                      l969 07C8                      l993 066C  
                    l985 0663                      l899 05DF                      l995 066D  
                    l987 0667                      l997 066E                      l989 066A  
                    l999 0671                      u300 0644                      u301 0643  
                    u320 0658                      u400 074C                      u321 0657  
                    u305 0640                      u401 074B                      u330 05E5  
                    u410 0772                      u315 064C                      u331 05E4  
                    u411 0771                      u260 0621                      u420 077D  
                    u500 06F1                      u261 0620                      u421 077C  
                    u501 06F0                      u350 05F7                      u430 0783  
                    u351 05F6                      u431 0782                      u415 076E  
                    u280 0633                      u360 0601                      u440 07D5  
                    u281 0632                      u361 0600                      u345 05E9  
                    u441 07D4                      u450 07E7                      u275 0625  
                    u451 07E6                      u380 0614                      u460 069B  
                    u381 0613                      u365 05FD                      u461 069A  
                    u517 067D                      u390 0712                      u470 06B2  
                    u295 0634                      u375 0608                      u391 0711  
                    u527 06F9                      u471 06B1                      u480 06B9  
                    u481 06B8                      u490 06DA                      u491 06D9  
                    fsr0 0004                      _txt 0020                      indf 0000  
                   l1001 0672                     l1011 0679                     l1003 0673  
                   l1021 0688                     l1013 0680                     l1005 0674  
                   l1031 06A3                     l1023 068B                     l1015 0684  
                   l1007 0675                     l1041 06DA                     l1033 06A9  
                   l1025 068E                     l1017 0686                     l1009 0676  
                   l1043 06E2                     l1035 06B9                     l1027 068F  
                   l1019 0687                     l1045 06E8                     l1037 06C1  
                   l1029 069B                     l1047 06F1                     l1039 06CF  
                   l1069 0731                     STR_1 0013                     _main 065D  
                   btemp 007E                     start 0000                    ?_main 0070  
        __end_of___lwdiv 065D          __end_of___lwmod 0619                    _SPBRG 0099  
                  _PORTD 0008                    _TRISA 0085                    _TRISC 0087  
                  _TRISD 0088                    _TXREG 0019          __end_of_dpowers 0013  
                  main@k 0048                    pclath 000A                    status 0003  
                  wtemp0 007E          __end_of_sprintf 07EC          __initialization 07EC  
           __end_of_main 0704                   ??_main 0045                   _ADRESH 001E  
                 _ADRESL 009E                ??___lwdiv 0074                ??___lwmod 007C  
              ??_sprintf 003B  __end_of__initialization 07FC           __pcstackCOMMON 0070  
           __pidataBANK0 05C7               __pbssBANK0 004A               __pmaintext 065D  
             __stringtab 0003                  ___lwdiv 0619                  ___lwmod 05DF  
                __ptext1 0704                  __ptext2 05DF                  __ptext3 0619  
                _dpowers 0009                  _sprintf 0704     end_of_initialization 07FC  
              _RCSTAbits 0018                _TXSTAbits 0098      start_initialization 07EC  
             init_fetch0 05B4              __pdataBANK0 0020                ___latbits 0002  
          __pcstackBANK0 0038              sprintf@flag 003F              sprintf@prec 0040  
       ___lwdiv@dividend 0072                 ?___lwdiv 0070                 ?___lwmod 0078  
              __pstrings 0003         ___lwdiv@quotient 0075                 ?_sprintf 0038  
               _PIE1bits 008C               _ADCON0bits 001F              __stringbase 0008  
             _ADCON1bits 009F         __size_of___lwdiv 0044         __size_of___lwmod 003A  
               _adc_data 004A       __end_of__stringtab 0009               sprintf@val 0041  
        ___lwdiv@divisor 0070          ___lwdiv@counter 0077         __size_of_sprintf 00E8  
          __size_of_main 00A7                 init_ram0 05B8                sprintf@ap 003E  
              sprintf@sp 0043         ___lwmod@dividend 007A                stringcode 0003  
               sprintf@c 0044                 sprintf@f 0038          ___lwmod@divisor 0078  
        ___lwmod@counter 007D                 stringdir 0003                 stringtab 0003  
