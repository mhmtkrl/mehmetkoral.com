

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Fri Jan 29 14:29:57 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.20
    20                           ; Generated 12/02/2020 GMT
    21                           ; 
    22                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F877A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0098                     	;# 
   102  0099                     	;# 
   103  009C                     	;# 
   104  009D                     	;# 
   105  009E                     	;# 
   106  009F                     	;# 
   107  010C                     	;# 
   108  010D                     	;# 
   109  010E                     	;# 
   110  010F                     	;# 
   111  018C                     	;# 
   112  018D                     	;# 
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000D                     	;# 
   127  000E                     	;# 
   128  000E                     	;# 
   129  000F                     	;# 
   130  0010                     	;# 
   131  0011                     	;# 
   132  0012                     	;# 
   133  0013                     	;# 
   134  0014                     	;# 
   135  0015                     	;# 
   136  0015                     	;# 
   137  0016                     	;# 
   138  0017                     	;# 
   139  0018                     	;# 
   140  0019                     	;# 
   141  001A                     	;# 
   142  001B                     	;# 
   143  001B                     	;# 
   144  001C                     	;# 
   145  001D                     	;# 
   146  001E                     	;# 
   147  001F                     	;# 
   148  0081                     	;# 
   149  0085                     	;# 
   150  0086                     	;# 
   151  0087                     	;# 
   152  0088                     	;# 
   153  0089                     	;# 
   154  008C                     	;# 
   155  008D                     	;# 
   156  008E                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0093                     	;# 
   160  0094                     	;# 
   161  0098                     	;# 
   162  0099                     	;# 
   163  009C                     	;# 
   164  009D                     	;# 
   165  009E                     	;# 
   166  009F                     	;# 
   167  010C                     	;# 
   168  010D                     	;# 
   169  010E                     	;# 
   170  010F                     	;# 
   171  018C                     	;# 
   172  018D                     	;# 
   173                           
   174                           	psect	idataBANK0
   175  05D6                     __pidataBANK0:
   176                           
   177                           ;initializer for _txt
   178  05D6  340D               	retlw	13
   179  05D7  340A               	retlw	10
   180  05D8  3450               	retlw	80
   181  05D9  3449               	retlw	73
   182  05DA  3443               	retlw	67
   183  05DB  3423               	retlw	35
   184  05DC  3439               	retlw	57
   185  05DD  342D               	retlw	45
   186  05DE  3441               	retlw	65
   187  05DF  342F               	retlw	47
   188  05E0  3444               	retlw	68
   189  05E1  3420               	retlw	32
   190  05E2  3443               	retlw	67
   191  05E3  346F               	retlw	111
   192  05E4  346E               	retlw	110
   193  05E5  3476               	retlw	118
   194  05E6  3465               	retlw	101
   195  05E7  3472               	retlw	114
   196  05E8  3474               	retlw	116
   197  05E9  3465               	retlw	101
   198  05EA  3472               	retlw	114
   199  05EB  340D               	retlw	13
   200  05EC  340A               	retlw	10
   201  05ED  3400               	retlw	0
   202                           
   203                           	psect	strings
   204  0004                     __pstrings:
   205  0004                     stringtab:
   206  0004                     __stringtab:
   207  0004                     stringcode:	
   208                           ;	String table - string pointers are 1 byte each
   209                           
   210  0004                     stringdir:
   211  0004  3000               	movlw	high stringdir
   212  0005  008A               	movwf	10
   213  0006  0804               	movf	4,w
   214  0007  0A84               	incf	4,f
   215  0008  0782               	addwf	2,f
   216  0009                     __stringbase:
   217  0009  3400               	retlw	0
   218  000A                     __end_of__stringtab:
   219  000A                     _dpowers:
   220  000A  3401               	retlw	1
   221  000B  3400               	retlw	0
   222  000C  340A               	retlw	10
   223  000D  3400               	retlw	0
   224  000E  3464               	retlw	100
   225  000F  3400               	retlw	0
   226  0010  34E8               	retlw	232
   227  0011  3403               	retlw	3
   228  0012  3410               	retlw	16
   229  0013  3427               	retlw	39
   230  0014                     __end_of_dpowers:
   231  001E                     _ADRESH	set	30
   232  0019                     _TXREG	set	25
   233  0018                     _RCSTAbits	set	24
   234  001F                     _ADCON0bits	set	31
   235  0008                     _PORTD	set	8
   236  009E                     _ADRESL	set	158
   237  008C                     _PIE1bits	set	140
   238  0098                     _TXSTAbits	set	152
   239  0099                     _SPBRG	set	153
   240  0087                     _TRISC	set	135
   241  009F                     _ADCON1bits	set	159
   242  0085                     _TRISA	set	133
   243  0088                     _TRISD	set	136
   244  0014                     STR_1:
   245  0014  340D               	retlw	13
   246  0015  340A               	retlw	10
   247  0016  3441               	retlw	65	;'A'
   248  0017  3464               	retlw	100	;'d'
   249  0018  3463               	retlw	99	;'c'
   250  0019  3420               	retlw	32	;' '
   251  001A  3456               	retlw	86	;'V'
   252  001B  3461               	retlw	97	;'a'
   253  001C  346C               	retlw	108	;'l'
   254  001D  3475               	retlw	117	;'u'
   255  001E  3465               	retlw	101	;'e'
   256  001F  3420               	retlw	32	;' '
   257  0020  343D               	retlw	61	;'='
   258  0021  3420               	retlw	32	;' '
   259  0022  3425               	retlw	37	;'%'
   260  0023  3464               	retlw	100	;'d'
   261  0024  340D               	retlw	13
   262  0025  340A               	retlw	10
   263  0026  3400               	retlw	0
   264                           
   265                           	psect	cinit
   266  07EC                     start_initialization:	
   267                           ; #config settings
   268                           
   269  07EC                     __initialization:
   270                           
   271                           ; Initialize objects allocated to BANK0
   272  07EC  1383               	bcf	3,7	;select IRP bank0
   273  07ED  3038               	movlw	low (__pdataBANK0+24)
   274  07EE  00FD               	movwf	btemp+-1
   275  07EF  3005               	movlw	high __pidataBANK0
   276  07F0  00FE               	movwf	btemp
   277  07F1  30D6               	movlw	low __pidataBANK0
   278  07F2  00FF               	movwf	btemp+1
   279  07F3  3020               	movlw	low __pdataBANK0
   280  07F4  0084               	movwf	4
   281  07F5  120A  118A  25C7  120A  118A  	fcall	init_ram0
   282                           
   283                           ; Clear objects allocated to BANK0
   284  07FA  01C9               	clrf	__pbssBANK0& (0+127)
   285  07FB  01CA               	clrf	(__pbssBANK0+1)& (0+127)
   286  07FC                     end_of_initialization:	
   287                           ;End of C runtime variable initialization code
   288                           
   289  07FC                     __end_of__initialization:
   290  07FC  0183               	clrf	3
   291  07FD  120A  118A  2E6E   	ljmp	_main	;jump to C main() function
   292                           
   293                           	psect	bssBANK0
   294  0049                     __pbssBANK0:
   295  0049                     _adc_data:
   296  0049                     	ds	2
   297                           
   298                           	psect	dataBANK0
   299  0020                     __pdataBANK0:
   300  0020                     _txt:
   301  0020                     	ds	24
   302                           
   303                           	psect	inittext
   304  05C3                     init_fetch0:	
   305                           ;	Called with low address in FSR and high address in W
   306                           
   307  05C3  087E               	movf	btemp,w
   308  05C4  008A               	movwf	10
   309  05C5  087F               	movf	btemp+1,w
   310  05C6  0082               	movwf	2
   311  05C7                     init_ram0:	
   312                           ;Called with:
   313                           ;	high address of idata address in btemp 
   314                           ;	low address of idata address in btemp+1 
   315                           ;	low address of data in FSR
   316                           ;	high address + 1 of data in btemp-1
   317                           
   318  05C7  120A  118A  25C3  120A  118A  	fcall	init_fetch0
   319  05CC  0080               	movwf	0
   320  05CD  0A84               	incf	4,f
   321  05CE  0804               	movf	4,w
   322  05CF  067D               	xorwf	btemp+-1,w
   323  05D0  1903               	btfsc	3,2
   324  05D1  3400               	retlw	0
   325  05D2  0AFF               	incf	btemp+1,f
   326  05D3  1903               	btfsc	3,2
   327  05D4  0AFE               	incf	btemp,f
   328  05D5  2DC7               	goto	init_ram0
   329                           
   330                           	psect	cstackCOMMON
   331  0071                     __pcstackCOMMON:
   332  0071                     ?_main:
   333  0071                     ?___lwdiv:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0071                     ___lwdiv@divisor:	
   337                           ; 2 bytes @ 0x0
   338                           
   339                           
   340                           ; 2 bytes @ 0x0
   341  0071                     	ds	2
   342  0073                     ___lwdiv@dividend:
   343                           
   344                           ; 2 bytes @ 0x2
   345  0073                     	ds	2
   346  0075                     ??___lwdiv:
   347                           
   348                           ; 1 bytes @ 0x4
   349  0075                     	ds	1
   350  0076                     ___lwdiv@quotient:
   351                           
   352                           ; 2 bytes @ 0x5
   353  0076                     	ds	2
   354  0078                     ___lwdiv@counter:
   355                           
   356                           ; 1 bytes @ 0x7
   357  0078                     	ds	1
   358  0079                     ?___lwmod:
   359  0079                     ___lwmod@divisor:	
   360                           ; 2 bytes @ 0x8
   361                           
   362                           
   363                           ; 2 bytes @ 0x8
   364  0079                     	ds	2
   365  007B                     ___lwmod@dividend:
   366                           
   367                           ; 2 bytes @ 0xA
   368  007B                     	ds	2
   369  007D                     ??___lwmod:
   370                           
   371                           ; 1 bytes @ 0xC
   372  007D                     	ds	1
   373                           
   374                           	psect	cstackBANK0
   375  0038                     __pcstackBANK0:
   376  0038                     ___lwmod@counter:
   377                           
   378                           ; 1 bytes @ 0x0
   379  0038                     	ds	1
   380  0039                     ?_sprintf:
   381  0039                     sprintf@f:	
   382                           ; 2 bytes @ 0x1
   383                           
   384                           
   385                           ; 1 bytes @ 0x1
   386  0039                     	ds	3
   387  003C                     ??_sprintf:
   388                           
   389                           ; 1 bytes @ 0x4
   390  003C                     	ds	3
   391  003F                     sprintf@ap:
   392                           
   393                           ; 1 bytes @ 0x7
   394  003F                     	ds	1
   395  0040                     sprintf@flag:
   396                           
   397                           ; 1 bytes @ 0x8
   398  0040                     	ds	1
   399  0041                     sprintf@prec:
   400                           
   401                           ; 1 bytes @ 0x9
   402  0041                     	ds	1
   403  0042                     sprintf@val:
   404                           
   405                           ; 2 bytes @ 0xA
   406  0042                     	ds	2
   407  0044                     sprintf@sp:
   408                           
   409                           ; 1 bytes @ 0xC
   410  0044                     	ds	1
   411  0045                     sprintf@c:
   412                           
   413                           ; 1 bytes @ 0xD
   414  0045                     	ds	1
   415  0046                     ??_main:
   416                           
   417                           ; 1 bytes @ 0xE
   418  0046                     	ds	1
   419  0047                     main@k:
   420                           
   421                           ; 2 bytes @ 0xF
   422  0047                     	ds	2
   423                           
   424                           	psect	maintext
   425  066E                     __pmaintext:	
   426 ;;
   427 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   428 ;;
   429 ;; *************** function _main *****************
   430 ;; Defined at:
   431 ;;		line 18 in file "main.c"
   432 ;; Parameters:    Size  Location     Type
   433 ;;		None
   434 ;; Auto vars:     Size  Location     Type
   435 ;;  k               2   15[BANK0 ] int 
   436 ;; Return value:  Size  Location     Type
   437 ;;                  1    wreg      void 
   438 ;; Registers used:
   439 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   440 ;; Tracked objects:
   441 ;;		On entry : B00/0
   442 ;;		On exit  : 0/0
   443 ;;		Unchanged: 0/0
   444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   445 ;;      Params:         0       0       0       0       0
   446 ;;      Locals:         0       2       0       0       0
   447 ;;      Temps:          0       1       0       0       0
   448 ;;      Totals:         0       3       0       0       0
   449 ;;Total ram usage:        3 bytes
   450 ;; Hardware stack levels required when called:    2
   451 ;; This function calls:
   452 ;;		_sprintf
   453 ;; This function is called by:
   454 ;;		Startup code after reset
   455 ;; This function uses a non-reentrant model
   456 ;;
   457                           
   458                           
   459                           ;psect for function _main
   460  066E                     _main:
   461  066E                     l981:	
   462                           ;incstack = 0
   463                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   464                           
   465                           
   466                           ;main.c: 19:     TRISD = 0x00;
   467  066E  1683               	bsf	3,5	;RP0=1, select bank1
   468  066F  1303               	bcf	3,6	;RP1=0, select bank1
   469  0670  0188               	clrf	8	;volatile
   470                           
   471                           ;main.c: 20:     PORTD = 0x00;
   472  0671  1283               	bcf	3,5	;RP0=0, select bank0
   473  0672  1303               	bcf	3,6	;RP1=0, select bank0
   474  0673  0188               	clrf	8	;volatile
   475  0674                     l983:
   476                           
   477                           ;main.c: 22:     TRISA = 0xFF;
   478  0674  30FF               	movlw	255
   479  0675  1683               	bsf	3,5	;RP0=1, select bank1
   480  0676  1303               	bcf	3,6	;RP1=0, select bank1
   481  0677  0085               	movwf	5	;volatile
   482  0678                     l985:
   483                           
   484                           ;main.c: 23:     ADCON0bits.ADCS1 = 1;
   485  0678  1283               	bcf	3,5	;RP0=0, select bank0
   486  0679  1303               	bcf	3,6	;RP1=0, select bank0
   487  067A  179F               	bsf	31,7	;volatile
   488  067B                     l987:
   489                           
   490                           ;main.c: 24:     ADCON0bits.ADCS0 = 0;
   491  067B  131F               	bcf	31,6	;volatile
   492  067C                     l989:
   493                           
   494                           ;main.c: 26:     ADCON0bits.CHS2 = 0;
   495  067C  129F               	bcf	31,5	;volatile
   496  067D                     l991:
   497                           
   498                           ;main.c: 27:     ADCON0bits.CHS1 = 0;
   499  067D  121F               	bcf	31,4	;volatile
   500  067E                     l993:
   501                           
   502                           ;main.c: 28:     ADCON0bits.CHS0 = 0;
   503  067E  119F               	bcf	31,3	;volatile
   504  067F                     l995:
   505                           
   506                           ;main.c: 29:     ADCON1bits.ADFM = 1;
   507  067F  1683               	bsf	3,5	;RP0=1, select bank1
   508  0680  1303               	bcf	3,6	;RP1=0, select bank1
   509  0681  179F               	bsf	31,7	;volatile
   510  0682                     l997:
   511                           
   512                           ;main.c: 30:     ADCON1bits.ADCS2 = 1;
   513  0682  171F               	bsf	31,6	;volatile
   514  0683                     l999:
   515                           
   516                           ;main.c: 32:     ADCON1bits.PCFG3 = 1;
   517  0683  159F               	bsf	31,3	;volatile
   518  0684                     l1001:
   519                           
   520                           ;main.c: 33:     ADCON1bits.PCFG2 = 1;
   521  0684  151F               	bsf	31,2	;volatile
   522  0685                     l1003:
   523                           
   524                           ;main.c: 34:     ADCON1bits.PCFG1 = 1;
   525  0685  149F               	bsf	31,1	;volatile
   526  0686                     l1005:
   527                           
   528                           ;main.c: 35:     ADCON1bits.PCFG0 = 0;
   529  0686  101F               	bcf	31,0	;volatile
   530  0687                     l1007:
   531                           
   532                           ;main.c: 36:     ADCON0bits.ADON = 1;
   533  0687  1283               	bcf	3,5	;RP0=0, select bank0
   534  0688  1303               	bcf	3,6	;RP1=0, select bank0
   535  0689  141F               	bsf	31,0	;volatile
   536  068A                     l1009:
   537                           
   538                           ;main.c: 37:     _delay((unsigned long)((20)*(20000000/4000000.0)));
   539  068A  3020               	movlw	32
   540  068B  1283               	bcf	3,5	;RP0=0, select bank0
   541  068C  1303               	bcf	3,6	;RP1=0, select bank0
   542  068D  00C6               	movwf	??_main
   543  068E                     u517:
   544  068E  0BC6               	decfsz	??_main,f
   545  068F  2E8E               	goto	u517
   546  0690  0000               	nop
   547  0691                     l1011:
   548                           
   549                           ;main.c: 40:     TRISC = 0xFF;
   550  0691  30FF               	movlw	255
   551  0692  1683               	bsf	3,5	;RP0=1, select bank1
   552  0693  1303               	bcf	3,6	;RP1=0, select bank1
   553  0694  0087               	movwf	7	;volatile
   554  0695                     l1013:
   555                           
   556                           ;main.c: 41:     SPBRG = 20;
   557  0695  3014               	movlw	20
   558  0696  0099               	movwf	25	;volatile
   559  0697                     l1015:
   560                           
   561                           ;main.c: 42:     TXSTAbits.BRGH = 1;
   562  0697  1518               	bsf	24,2	;volatile
   563  0698                     l1017:
   564                           
   565                           ;main.c: 43:     TXSTAbits.SYNC = 0;
   566  0698  1218               	bcf	24,4	;volatile
   567  0699                     l1019:
   568                           
   569                           ;main.c: 44:     RCSTAbits.SPEN = 1;
   570  0699  1283               	bcf	3,5	;RP0=0, select bank0
   571  069A  1303               	bcf	3,6	;RP1=0, select bank0
   572  069B  1798               	bsf	24,7	;volatile
   573  069C                     l1021:
   574                           
   575                           ;main.c: 45:     PIE1bits.TXIE = 0;
   576  069C  1683               	bsf	3,5	;RP0=1, select bank1
   577  069D  1303               	bcf	3,6	;RP1=0, select bank1
   578  069E  120C               	bcf	12,4	;volatile
   579  069F                     l1023:
   580                           
   581                           ;main.c: 46:     TXSTAbits.TX9 = 0;
   582  069F  1318               	bcf	24,6	;volatile
   583  06A0                     l1025:
   584                           
   585                           ;main.c: 47:     TXSTAbits.TXEN = 1;
   586  06A0  1698               	bsf	24,5	;volatile
   587                           
   588                           ;main.c: 49:     int k;;main.c: 50:     for(k = 0; txt[k] != '\0' ; k++) {
   589  06A1  1283               	bcf	3,5	;RP0=0, select bank0
   590  06A2  1303               	bcf	3,6	;RP1=0, select bank0
   591  06A3  01C7               	clrf	main@k
   592  06A4  01C8               	clrf	main@k+1
   593  06A5  2EBA               	goto	l1031
   594  06A6                     l41:
   595  06A6  1683               	bsf	3,5	;RP0=1, select bank1
   596  06A7  1303               	bcf	3,6	;RP1=0, select bank1
   597  06A8  1C98               	btfss	24,1	;volatile
   598  06A9  2EAB               	goto	u461
   599  06AA  2EAC               	goto	u460
   600  06AB                     u461:
   601  06AB  2EA6               	goto	l41
   602  06AC                     u460:
   603  06AC                     l1027:
   604                           
   605                           ;main.c: 52:         TXREG = txt[k];
   606  06AC  1283               	bcf	3,5	;RP0=0, select bank0
   607  06AD  1303               	bcf	3,6	;RP1=0, select bank0
   608  06AE  0847               	movf	main@k,w
   609  06AF  3E20               	addlw	(low (_txt| 0))& (0+255)
   610  06B0  0084               	movwf	4
   611  06B1  1383               	bcf	3,7	;select IRP bank0
   612  06B2  0800               	movf	0,w
   613  06B3  0099               	movwf	25	;volatile
   614  06B4                     l1029:
   615                           
   616                           ;main.c: 53:     }
   617  06B4  3001               	movlw	1
   618  06B5  07C7               	addwf	main@k,f
   619  06B6  1803               	skipnc
   620  06B7  0AC8               	incf	main@k+1,f
   621  06B8  3000               	movlw	0
   622  06B9  07C8               	addwf	main@k+1,f
   623  06BA                     l1031:
   624  06BA  0847               	movf	main@k,w
   625  06BB  3E20               	addlw	(low (_txt| 0))& (0+255)
   626  06BC  0084               	movwf	4
   627  06BD  1383               	bcf	3,7	;select IRP bank0
   628  06BE  0800               	movf	0,w
   629  06BF  1D03               	btfss	3,2
   630  06C0  2EC2               	goto	u471
   631  06C1  2EC3               	goto	u470
   632  06C2                     u471:
   633  06C2  2EA6               	goto	l41
   634  06C3                     u470:
   635  06C3                     l45:	
   636                           ;main.c: 55:     while(1) {
   637                           
   638                           
   639                           ;main.c: 56:         ADCON0bits.GO_nDONE = 1;
   640  06C3  151F               	bsf	31,2	;volatile
   641  06C4                     l46:	
   642                           ;main.c: 57:         while(ADCON0bits.GO_nDONE);
   643                           
   644  06C4  191F               	btfsc	31,2	;volatile
   645  06C5  2EC7               	goto	u481
   646  06C6  2EC8               	goto	u480
   647  06C7                     u481:
   648  06C7  2EC4               	goto	l46
   649  06C8                     u480:
   650  06C8                     l1033:
   651                           
   652                           ;main.c: 58:         adc_data = (ADRESH << 8) + ADRESL;
   653  06C8  081E               	movf	30,w	;volatile
   654  06C9  00CA               	movwf	_adc_data+1
   655  06CA  1683               	bsf	3,5	;RP0=1, select bank1
   656  06CB  1303               	bcf	3,6	;RP1=0, select bank1
   657  06CC  081E               	movf	30,w	;volatile
   658  06CD  1283               	bcf	3,5	;RP0=0, select bank0
   659  06CE  1303               	bcf	3,6	;RP1=0, select bank0
   660  06CF  00C9               	movwf	_adc_data
   661  06D0                     l1035:
   662                           
   663                           ;main.c: 59:         sprintf(txt, "\r\nAdc Value = %d\r\n", adc_data);
   664  06D0  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   665  06D1  00C6               	movwf	??_main
   666  06D2  0846               	movf	??_main,w
   667  06D3  00B9               	movwf	sprintf@f
   668  06D4  084A               	movf	_adc_data+1,w
   669  06D5  00BB               	movwf	?_sprintf+2
   670  06D6  0849               	movf	_adc_data,w
   671  06D7  00BA               	movwf	?_sprintf+1
   672  06D8  3020               	movlw	(low (_txt| 0))& (0+255)
   673  06D9  120A  118A  2704  120A  118A  	fcall	_sprintf
   674  06DE                     l1037:
   675                           
   676                           ;main.c: 60:         for(k = 0; txt[k] != '\0' ; k++) {
   677  06DE  1283               	bcf	3,5	;RP0=0, select bank0
   678  06DF  1303               	bcf	3,6	;RP1=0, select bank0
   679  06E0  01C7               	clrf	main@k
   680  06E1  01C8               	clrf	main@k+1
   681  06E2  2EF7               	goto	l1043
   682  06E3                     l51:
   683  06E3  1683               	bsf	3,5	;RP0=1, select bank1
   684  06E4  1303               	bcf	3,6	;RP1=0, select bank1
   685  06E5  1C98               	btfss	24,1	;volatile
   686  06E6  2EE8               	goto	u491
   687  06E7  2EE9               	goto	u490
   688  06E8                     u491:
   689  06E8  2EE3               	goto	l51
   690  06E9                     u490:
   691  06E9                     l1039:
   692                           
   693                           ;main.c: 62:             TXREG = txt[k];
   694  06E9  1283               	bcf	3,5	;RP0=0, select bank0
   695  06EA  1303               	bcf	3,6	;RP1=0, select bank0
   696  06EB  0847               	movf	main@k,w
   697  06EC  3E20               	addlw	(low (_txt| 0))& (0+255)
   698  06ED  0084               	movwf	4
   699  06EE  1383               	bcf	3,7	;select IRP bank0
   700  06EF  0800               	movf	0,w
   701  06F0  0099               	movwf	25	;volatile
   702  06F1                     l1041:
   703                           
   704                           ;main.c: 63:         }
   705  06F1  3001               	movlw	1
   706  06F2  07C7               	addwf	main@k,f
   707  06F3  1803               	skipnc
   708  06F4  0AC8               	incf	main@k+1,f
   709  06F5  3000               	movlw	0
   710  06F6  07C8               	addwf	main@k+1,f
   711  06F7                     l1043:
   712  06F7  0847               	movf	main@k,w
   713  06F8  3E20               	addlw	(low (_txt| 0))& (0+255)
   714  06F9  0084               	movwf	4
   715  06FA  1383               	bcf	3,7	;select IRP bank0
   716  06FB  0800               	movf	0,w
   717  06FC  1D03               	btfss	3,2
   718  06FD  2EFF               	goto	u501
   719  06FE  2F00               	goto	u500
   720  06FF                     u501:
   721  06FF  2EE3               	goto	l51
   722  0700                     u500:
   723  0700  2EC3               	goto	l45
   724  0701  120A  118A  2801   	ljmp	start
   725  0704                     __end_of_main:
   726                           
   727                           	psect	text1
   728  0704                     __ptext1:	
   729 ;; *************** function _sprintf *****************
   730 ;; Defined at:
   731 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
   732 ;; Parameters:    Size  Location     Type
   733 ;;  sp              1    wreg     PTR unsigned char 
   734 ;;		 -> txt(24), 
   735 ;;  f               1    1[BANK0 ] PTR const unsigned char 
   736 ;;		 -> STR_1(19), 
   737 ;; Auto vars:     Size  Location     Type
   738 ;;  sp              1   12[BANK0 ] PTR unsigned char 
   739 ;;		 -> txt(24), 
   740 ;;  tmpval          4    0        struct .
   741 ;;  val             2   10[BANK0 ] unsigned int 
   742 ;;  cp              2    0        PTR const unsigned char 
   743 ;;  len             2    0        unsigned int 
   744 ;;  c               1   13[BANK0 ] unsigned char 
   745 ;;  prec            1    9[BANK0 ] char 
   746 ;;  flag            1    8[BANK0 ] unsigned char 
   747 ;;  ap              1    7[BANK0 ] PTR void [1]
   748 ;;		 -> ?_sprintf(2), 
   749 ;; Return value:  Size  Location     Type
   750 ;;                  2    1[BANK0 ] int 
   751 ;; Registers used:
   752 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   753 ;; Tracked objects:
   754 ;;		On entry : 0/0
   755 ;;		On exit  : 0/0
   756 ;;		Unchanged: 0/0
   757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   758 ;;      Params:         0       3       0       0       0
   759 ;;      Locals:         0       7       0       0       0
   760 ;;      Temps:          0       3       0       0       0
   761 ;;      Totals:         0      13       0       0       0
   762 ;;Total ram usage:       13 bytes
   763 ;; Hardware stack levels used:    1
   764 ;; Hardware stack levels required when called:    1
   765 ;; This function calls:
   766 ;;		___lwdiv
   767 ;;		___lwmod
   768 ;; This function is called by:
   769 ;;		_main
   770 ;; This function uses a non-reentrant model
   771 ;;
   772                           
   773                           
   774                           ;psect for function _sprintf
   775  0704                     _sprintf:
   776                           
   777                           ;incstack = 0
   778                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   779                           ;sprintf@sp stored from wreg
   780  0704  1283               	bcf	3,5	;RP0=0, select bank0
   781  0705  1303               	bcf	3,6	;RP1=0, select bank0
   782  0706  00C4               	movwf	sprintf@sp
   783  0707                     l919:
   784                           
   785                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   786  0707  303A               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   787  0708  00BC               	movwf	??_sprintf
   788  0709  083C               	movf	??_sprintf,w
   789  070A  00BF               	movwf	sprintf@ap
   790                           
   791                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   792  070B  2FD5               	goto	l971
   793  070C                     l921:
   794                           
   795                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   796  070C  3025               	movlw	37
   797  070D  0645               	xorwf	sprintf@c,w
   798  070E  1903               	btfsc	3,2
   799  070F  2F11               	goto	u391
   800  0710  2F12               	goto	u390
   801  0711                     u391:
   802  0711  2F1E               	goto	l927
   803  0712                     u390:
   804  0712                     l923:
   805                           
   806                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   807  0712  0845               	movf	sprintf@c,w
   808  0713  00BC               	movwf	??_sprintf
   809  0714  0844               	movf	sprintf@sp,w
   810  0715  0084               	movwf	4
   811  0716  083C               	movf	??_sprintf,w
   812  0717  1383               	bcf	3,7	;select IRP bank0
   813  0718  0080               	movwf	0
   814  0719                     l925:
   815  0719  3001               	movlw	1
   816  071A  00BC               	movwf	??_sprintf
   817  071B  083C               	movf	??_sprintf,w
   818  071C  07C4               	addwf	sprintf@sp,f
   819                           
   820                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
   821  071D  2FD5               	goto	l971
   822  071E                     l927:
   823                           
   824                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   825  071E  01C0               	clrf	sprintf@flag
   826  071F                     l931:	
   827                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   828                           
   829  071F  3001               	movlw	1
   830  0720  07B9               	addwf	sprintf@f,f
   831  0721  30FF               	movlw	-1
   832  0722  0739               	addwf	sprintf@f,w
   833  0723  0084               	movwf	4
   834  0724  120A  118A  2004  120A  118A  	fcall	stringdir
   835  0729  00C5               	movwf	sprintf@c
   836  072A  00BC               	movwf	??_sprintf
   837  072B  01BD               	clrf	??_sprintf+1
   838                           
   839                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   840                           ; Switch size 1, requested type "simple"
   841                           ; Number of cases is 1, Range of values is 0 to 0
   842                           ; switch strategies available:
   843                           ; Name         Instructions Cycles
   844                           ; simple_byte            4     3 (average)
   845                           ; direct_byte           11     8 (fixed)
   846                           ; jumptable            260     6 (fixed)
   847                           ;	Chosen strategy is simple_byte
   848  072C  083D               	movf	??_sprintf+1,w
   849  072D  3A00               	xorlw	0	; case 0
   850  072E  1903               	skipnz
   851  072F  2F31               	goto	l1065
   852  0730  2FD5               	goto	l971
   853  0731                     l1065:
   854                           
   855                           ; Switch size 1, requested type "simple"
   856                           ; Number of cases is 3, Range of values is 0 to 105
   857                           ; switch strategies available:
   858                           ; Name         Instructions Cycles
   859                           ; simple_byte           10     6 (average)
   860                           ; jumptable            260     6 (fixed)
   861                           ;	Chosen strategy is simple_byte
   862  0731  083C               	movf	??_sprintf,w
   863  0732  3A00               	xorlw	0	; case 0
   864  0733  1903               	skipnz
   865  0734  2FE7               	goto	l973
   866  0735  3A64               	xorlw	100	; case 100
   867  0736  1903               	skipnz
   868  0737  2F3C               	goto	l933
   869  0738  3A0D               	xorlw	13	; case 105
   870  0739  1903               	skipnz
   871  073A  2F3C               	goto	l933
   872  073B  2FD5               	goto	l971
   873  073C                     l933:
   874                           
   875                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
   876  073C  083F               	movf	sprintf@ap,w
   877  073D  0084               	movwf	4
   878  073E  1383               	bcf	3,7	;select IRP bank0
   879  073F  0800               	movf	0,w
   880  0740  00C2               	movwf	sprintf@val
   881  0741  0A84               	incf	4,f
   882  0742  0800               	movf	0,w
   883  0743  00C3               	movwf	sprintf@val+1
   884  0744                     l935:
   885  0744  3002               	movlw	2
   886  0745  00BC               	movwf	??_sprintf
   887  0746  083C               	movf	??_sprintf,w
   888  0747  07BF               	addwf	sprintf@ap,f
   889  0748                     l937:
   890                           
   891                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
   892  0748  1FC3               	btfss	sprintf@val+1,7
   893  0749  2F4B               	goto	u401
   894  074A  2F4C               	goto	u400
   895  074B                     u401:
   896  074B  2F55               	goto	l943
   897  074C                     u400:
   898  074C                     l939:
   899                           
   900                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
   901  074C  3003               	movlw	3
   902  074D  00BC               	movwf	??_sprintf
   903  074E  083C               	movf	??_sprintf,w
   904  074F  04C0               	iorwf	sprintf@flag,f
   905  0750                     l941:
   906                           
   907                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
   908  0750  09C2               	comf	sprintf@val,f
   909  0751  09C3               	comf	sprintf@val+1,f
   910  0752  0AC2               	incf	sprintf@val,f
   911  0753  1903               	skipnz
   912  0754  0AC3               	incf	sprintf@val+1,f
   913  0755                     l943:
   914                           
   915                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
   916  0755  01C5               	clrf	sprintf@c
   917  0756  0AC5               	incf	sprintf@c,f
   918  0757                     l949:
   919                           
   920                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
   921  0757  0845               	movf	sprintf@c,w
   922  0758  00BC               	movwf	??_sprintf
   923  0759  073C               	addwf	??_sprintf,w
   924  075A  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   925  075B  0084               	movwf	4
   926  075C  120A  118A  2004  120A  118A  	fcall	stringdir
   927  0761  00BD               	movwf	??_sprintf+1
   928  0762  120A  118A  2004  120A  118A  	fcall	stringdir
   929  0767  00BE               	movwf	??_sprintf+2
   930  0768  083E               	movf	??_sprintf+2,w
   931  0769  0243               	subwf	sprintf@val+1,w
   932  076A  1D03               	skipz
   933  076B  2F6E               	goto	u415
   934  076C  083D               	movf	??_sprintf+1,w
   935  076D  0242               	subwf	sprintf@val,w
   936  076E                     u415:
   937  076E  1803               	skipnc
   938  076F  2F71               	goto	u411
   939  0770  2F72               	goto	u410
   940  0771                     u411:
   941  0771  2F73               	goto	l953
   942  0772                     u410:
   943  0772  2F7D               	goto	l955
   944  0773                     l953:
   945  0773  3001               	movlw	1
   946  0774  00BC               	movwf	??_sprintf
   947  0775  083C               	movf	??_sprintf,w
   948  0776  07C5               	addwf	sprintf@c,f
   949  0777  3005               	movlw	5
   950  0778  0645               	xorwf	sprintf@c,w
   951  0779  1D03               	btfss	3,2
   952  077A  2F7C               	goto	u421
   953  077B  2F7D               	goto	u420
   954  077C                     u421:
   955  077C  2F57               	goto	l949
   956  077D                     u420:
   957  077D                     l955:
   958                           
   959                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
   960  077D  0840               	movf	sprintf@flag,w
   961  077E  3903               	andlw	3
   962  077F  1903               	btfsc	3,2
   963  0780  2F82               	goto	u431
   964  0781  2F83               	goto	u430
   965  0782                     u431:
   966  0782  2F8E               	goto	l961
   967  0783                     u430:
   968  0783                     l957:
   969                           
   970                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
   971  0783  302D               	movlw	45
   972  0784  00BC               	movwf	??_sprintf
   973  0785  0844               	movf	sprintf@sp,w
   974  0786  0084               	movwf	4
   975  0787  083C               	movf	??_sprintf,w
   976  0788  1383               	bcf	3,7	;select IRP bank0
   977  0789  0080               	movwf	0
   978  078A                     l959:
   979  078A  3001               	movlw	1
   980  078B  00BC               	movwf	??_sprintf
   981  078C  083C               	movf	??_sprintf,w
   982  078D  07C4               	addwf	sprintf@sp,f
   983  078E                     l961:
   984                           
   985                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
   986  078E  0845               	movf	sprintf@c,w
   987  078F  00BC               	movwf	??_sprintf
   988  0790  083C               	movf	??_sprintf,w
   989  0791  00C1               	movwf	sprintf@prec
   990                           
   991                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
   992  0792  2FCC               	goto	l969
   993  0793                     l963:
   994                           
   995                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
   996  0793  300A               	movlw	10
   997  0794  00F9               	movwf	___lwmod@divisor
   998  0795  3000               	movlw	0
   999  0796  00FA               	movwf	___lwmod@divisor+1
  1000  0797  0841               	movf	sprintf@prec,w
  1001  0798  00BC               	movwf	??_sprintf
  1002  0799  073C               	addwf	??_sprintf,w
  1003  079A  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1004  079B  0084               	movwf	4
  1005  079C  120A  118A  2004  120A  118A  	fcall	stringdir
  1006  07A1  00F1               	movwf	___lwdiv@divisor
  1007  07A2  120A  118A  2004  120A  118A  	fcall	stringdir
  1008  07A7  00F2               	movwf	___lwdiv@divisor+1
  1009  07A8  0843               	movf	sprintf@val+1,w
  1010  07A9  00F4               	movwf	___lwdiv@dividend+1
  1011  07AA  0842               	movf	sprintf@val,w
  1012  07AB  00F3               	movwf	___lwdiv@dividend
  1013  07AC  120A  118A  262A  120A  118A  	fcall	___lwdiv
  1014  07B1  0872               	movf	?___lwdiv+1,w
  1015  07B2  00FC               	movwf	___lwmod@dividend+1
  1016  07B3  0871               	movf	?___lwdiv,w
  1017  07B4  00FB               	movwf	___lwmod@dividend
  1018  07B5  120A  118A  25EE  120A  118A  	fcall	___lwmod
  1019  07BA  0879               	movf	?___lwmod,w
  1020  07BB  3E30               	addlw	48
  1021  07BC  1283               	bcf	3,5	;RP0=0, select bank0
  1022  07BD  1303               	bcf	3,6	;RP1=0, select bank0
  1023  07BE  00BD               	movwf	??_sprintf+1
  1024  07BF  083D               	movf	??_sprintf+1,w
  1025  07C0  00C5               	movwf	sprintf@c
  1026  07C1                     l965:
  1027                           
  1028                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1029  07C1  0845               	movf	sprintf@c,w
  1030  07C2  00BC               	movwf	??_sprintf
  1031  07C3  0844               	movf	sprintf@sp,w
  1032  07C4  0084               	movwf	4
  1033  07C5  083C               	movf	??_sprintf,w
  1034  07C6  1383               	bcf	3,7	;select IRP bank0
  1035  07C7  0080               	movwf	0
  1036  07C8                     l967:
  1037  07C8  3001               	movlw	1
  1038  07C9  00BC               	movwf	??_sprintf
  1039  07CA  083C               	movf	??_sprintf,w
  1040  07CB  07C4               	addwf	sprintf@sp,f
  1041  07CC                     l969:
  1042                           
  1043                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1044  07CC  30FF               	movlw	255
  1045  07CD  00BC               	movwf	??_sprintf
  1046  07CE  083C               	movf	??_sprintf,w
  1047  07CF  07C1               	addwf	sprintf@prec,f
  1048  07D0  0A41               	incf	sprintf@prec,w
  1049  07D1  1D03               	btfss	3,2
  1050  07D2  2FD4               	goto	u441
  1051  07D3  2FD5               	goto	u440
  1052  07D4                     u441:
  1053  07D4  2F93               	goto	l963
  1054  07D5                     u440:
  1055  07D5                     l971:
  1056                           
  1057                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1058  07D5  3001               	movlw	1
  1059  07D6  07B9               	addwf	sprintf@f,f
  1060  07D7  30FF               	movlw	-1
  1061  07D8  0739               	addwf	sprintf@f,w
  1062  07D9  0084               	movwf	4
  1063  07DA  120A  118A  2004  120A  118A  	fcall	stringdir
  1064  07DF  00BC               	movwf	??_sprintf
  1065  07E0  083C               	movf	??_sprintf,w
  1066  07E1  00C5               	movwf	sprintf@c
  1067  07E2  0845               	movf	sprintf@c,w
  1068  07E3  1D03               	btfss	3,2
  1069  07E4  2FE6               	goto	u451
  1070  07E5  2FE7               	goto	u450
  1071  07E6                     u451:
  1072  07E6  2F0C               	goto	l921
  1073  07E7                     u450:
  1074  07E7                     l973:
  1075                           
  1076                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1077  07E7  0844               	movf	sprintf@sp,w
  1078  07E8  0084               	movwf	4
  1079  07E9  1383               	bcf	3,7	;select IRP bank0
  1080  07EA  0180               	clrf	0
  1081  07EB                     l167:
  1082  07EB  0008               	return
  1083  07EC                     __end_of_sprintf:
  1084                           
  1085                           	psect	text2
  1086  05EE                     __ptext2:	
  1087 ;; *************** function ___lwmod *****************
  1088 ;; Defined at:
  1089 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  1090 ;; Parameters:    Size  Location     Type
  1091 ;;  divisor         2    8[COMMON] unsigned int 
  1092 ;;  dividend        2   10[COMMON] unsigned int 
  1093 ;; Auto vars:     Size  Location     Type
  1094 ;;  counter         1    0[BANK0 ] unsigned char 
  1095 ;; Return value:  Size  Location     Type
  1096 ;;                  2    8[COMMON] unsigned int 
  1097 ;; Registers used:
  1098 ;;		wreg, status,2, status,0
  1099 ;; Tracked objects:
  1100 ;;		On entry : 0/0
  1101 ;;		On exit  : 0/0
  1102 ;;		Unchanged: 0/0
  1103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1104 ;;      Params:         4       0       0       0       0
  1105 ;;      Locals:         0       1       0       0       0
  1106 ;;      Temps:          1       0       0       0       0
  1107 ;;      Totals:         5       1       0       0       0
  1108 ;;Total ram usage:        6 bytes
  1109 ;; Hardware stack levels used:    1
  1110 ;; This function calls:
  1111 ;;		Nothing
  1112 ;; This function is called by:
  1113 ;;		_sprintf
  1114 ;; This function uses a non-reentrant model
  1115 ;;
  1116                           
  1117                           
  1118                           ;psect for function ___lwmod
  1119  05EE                     ___lwmod:
  1120  05EE                     l897:	
  1121                           ;incstack = 0
  1122                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1123                           
  1124  05EE  0879               	movf	___lwmod@divisor,w
  1125  05EF  047A               	iorwf	___lwmod@divisor+1,w
  1126  05F0  1903               	btfsc	3,2
  1127  05F1  2DF3               	goto	u331
  1128  05F2  2DF4               	goto	u330
  1129  05F3                     u331:
  1130  05F3  2E25               	goto	l915
  1131  05F4                     u330:
  1132  05F4                     l899:
  1133  05F4  1283               	bcf	3,5	;RP0=0, select bank0
  1134  05F5  1303               	bcf	3,6	;RP1=0, select bank0
  1135  05F6  01B8               	clrf	___lwmod@counter
  1136  05F7  0AB8               	incf	___lwmod@counter,f
  1137  05F8  2E04               	goto	l905
  1138  05F9                     l901:
  1139  05F9  3001               	movlw	1
  1140  05FA                     u345:
  1141  05FA  1003               	clrc
  1142  05FB  0DF9               	rlf	___lwmod@divisor,f
  1143  05FC  0DFA               	rlf	___lwmod@divisor+1,f
  1144  05FD  3EFF               	addlw	-1
  1145  05FE  1D03               	skipz
  1146  05FF  2DFA               	goto	u345
  1147  0600                     l903:
  1148  0600  3001               	movlw	1
  1149  0601  00FD               	movwf	??___lwmod
  1150  0602  087D               	movf	??___lwmod,w
  1151  0603  07B8               	addwf	___lwmod@counter,f
  1152  0604                     l905:
  1153  0604  1FFA               	btfss	___lwmod@divisor+1,7
  1154  0605  2E07               	goto	u351
  1155  0606  2E08               	goto	u350
  1156  0607                     u351:
  1157  0607  2DF9               	goto	l901
  1158  0608                     u350:
  1159  0608                     l907:
  1160  0608  087A               	movf	___lwmod@divisor+1,w
  1161  0609  027C               	subwf	___lwmod@dividend+1,w
  1162  060A  1D03               	skipz
  1163  060B  2E0E               	goto	u365
  1164  060C  0879               	movf	___lwmod@divisor,w
  1165  060D  027B               	subwf	___lwmod@dividend,w
  1166  060E                     u365:
  1167  060E  1C03               	skipc
  1168  060F  2E11               	goto	u361
  1169  0610  2E12               	goto	u360
  1170  0611                     u361:
  1171  0611  2E18               	goto	l911
  1172  0612                     u360:
  1173  0612                     l909:
  1174  0612  0879               	movf	___lwmod@divisor,w
  1175  0613  02FB               	subwf	___lwmod@dividend,f
  1176  0614  087A               	movf	___lwmod@divisor+1,w
  1177  0615  1C03               	skipc
  1178  0616  03FC               	decf	___lwmod@dividend+1,f
  1179  0617  02FC               	subwf	___lwmod@dividend+1,f
  1180  0618                     l911:
  1181  0618  3001               	movlw	1
  1182  0619                     u375:
  1183  0619  1003               	clrc
  1184  061A  0CFA               	rrf	___lwmod@divisor+1,f
  1185  061B  0CF9               	rrf	___lwmod@divisor,f
  1186  061C  3EFF               	addlw	-1
  1187  061D  1D03               	skipz
  1188  061E  2E19               	goto	u375
  1189  061F                     l913:
  1190  061F  3001               	movlw	1
  1191  0620  02B8               	subwf	___lwmod@counter,f
  1192  0621  1D03               	btfss	3,2
  1193  0622  2E24               	goto	u381
  1194  0623  2E25               	goto	u380
  1195  0624                     u381:
  1196  0624  2E08               	goto	l907
  1197  0625                     u380:
  1198  0625                     l915:
  1199  0625  087C               	movf	___lwmod@dividend+1,w
  1200  0626  00FA               	movwf	?___lwmod+1
  1201  0627  087B               	movf	___lwmod@dividend,w
  1202  0628  00F9               	movwf	?___lwmod
  1203  0629                     l453:
  1204  0629  0008               	return
  1205  062A                     __end_of___lwmod:
  1206                           
  1207                           	psect	text3
  1208  062A                     __ptext3:	
  1209 ;; *************** function ___lwdiv *****************
  1210 ;; Defined at:
  1211 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  1212 ;; Parameters:    Size  Location     Type
  1213 ;;  divisor         2    0[COMMON] unsigned int 
  1214 ;;  dividend        2    2[COMMON] unsigned int 
  1215 ;; Auto vars:     Size  Location     Type
  1216 ;;  quotient        2    5[COMMON] unsigned int 
  1217 ;;  counter         1    7[COMMON] unsigned char 
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  2    0[COMMON] unsigned int 
  1220 ;; Registers used:
  1221 ;;		wreg, status,2, status,0
  1222 ;; Tracked objects:
  1223 ;;		On entry : 0/0
  1224 ;;		On exit  : 0/0
  1225 ;;		Unchanged: 0/0
  1226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1227 ;;      Params:         4       0       0       0       0
  1228 ;;      Locals:         3       0       0       0       0
  1229 ;;      Temps:          1       0       0       0       0
  1230 ;;      Totals:         8       0       0       0       0
  1231 ;;Total ram usage:        8 bytes
  1232 ;; Hardware stack levels used:    1
  1233 ;; This function calls:
  1234 ;;		Nothing
  1235 ;; This function is called by:
  1236 ;;		_sprintf
  1237 ;; This function uses a non-reentrant model
  1238 ;;
  1239                           
  1240                           
  1241                           ;psect for function ___lwdiv
  1242  062A                     ___lwdiv:
  1243  062A                     l871:	
  1244                           ;incstack = 0
  1245                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1246                           
  1247  062A  01F6               	clrf	___lwdiv@quotient
  1248  062B  01F7               	clrf	___lwdiv@quotient+1
  1249  062C                     l873:
  1250  062C  0871               	movf	___lwdiv@divisor,w
  1251  062D  0472               	iorwf	___lwdiv@divisor+1,w
  1252  062E  1903               	btfsc	3,2
  1253  062F  2E31               	goto	u261
  1254  0630  2E32               	goto	u260
  1255  0631                     u261:
  1256  0631  2E69               	goto	l893
  1257  0632                     u260:
  1258  0632                     l875:
  1259  0632  01F8               	clrf	___lwdiv@counter
  1260  0633  0AF8               	incf	___lwdiv@counter,f
  1261  0634  2E40               	goto	l881
  1262  0635                     l877:
  1263  0635  3001               	movlw	1
  1264  0636                     u275:
  1265  0636  1003               	clrc
  1266  0637  0DF1               	rlf	___lwdiv@divisor,f
  1267  0638  0DF2               	rlf	___lwdiv@divisor+1,f
  1268  0639  3EFF               	addlw	-1
  1269  063A  1D03               	skipz
  1270  063B  2E36               	goto	u275
  1271  063C                     l879:
  1272  063C  3001               	movlw	1
  1273  063D  00F5               	movwf	??___lwdiv
  1274  063E  0875               	movf	??___lwdiv,w
  1275  063F  07F8               	addwf	___lwdiv@counter,f
  1276  0640                     l881:
  1277  0640  1FF2               	btfss	___lwdiv@divisor+1,7
  1278  0641  2E43               	goto	u281
  1279  0642  2E44               	goto	u280
  1280  0643                     u281:
  1281  0643  2E35               	goto	l877
  1282  0644                     u280:
  1283  0644                     l883:
  1284  0644  3001               	movlw	1
  1285  0645                     u295:
  1286  0645  1003               	clrc
  1287  0646  0DF6               	rlf	___lwdiv@quotient,f
  1288  0647  0DF7               	rlf	___lwdiv@quotient+1,f
  1289  0648  3EFF               	addlw	-1
  1290  0649  1D03               	skipz
  1291  064A  2E45               	goto	u295
  1292  064B  0872               	movf	___lwdiv@divisor+1,w
  1293  064C  0274               	subwf	___lwdiv@dividend+1,w
  1294  064D  1D03               	skipz
  1295  064E  2E51               	goto	u305
  1296  064F  0871               	movf	___lwdiv@divisor,w
  1297  0650  0273               	subwf	___lwdiv@dividend,w
  1298  0651                     u305:
  1299  0651  1C03               	skipc
  1300  0652  2E54               	goto	u301
  1301  0653  2E55               	goto	u300
  1302  0654                     u301:
  1303  0654  2E5C               	goto	l889
  1304  0655                     u300:
  1305  0655                     l885:
  1306  0655  0871               	movf	___lwdiv@divisor,w
  1307  0656  02F3               	subwf	___lwdiv@dividend,f
  1308  0657  0872               	movf	___lwdiv@divisor+1,w
  1309  0658  1C03               	skipc
  1310  0659  03F4               	decf	___lwdiv@dividend+1,f
  1311  065A  02F4               	subwf	___lwdiv@dividend+1,f
  1312  065B                     l887:
  1313  065B  1476               	bsf	___lwdiv@quotient,0
  1314  065C                     l889:
  1315  065C  3001               	movlw	1
  1316  065D                     u315:
  1317  065D  1003               	clrc
  1318  065E  0CF2               	rrf	___lwdiv@divisor+1,f
  1319  065F  0CF1               	rrf	___lwdiv@divisor,f
  1320  0660  3EFF               	addlw	-1
  1321  0661  1D03               	skipz
  1322  0662  2E5D               	goto	u315
  1323  0663                     l891:
  1324  0663  3001               	movlw	1
  1325  0664  02F8               	subwf	___lwdiv@counter,f
  1326  0665  1D03               	btfss	3,2
  1327  0666  2E68               	goto	u321
  1328  0667  2E69               	goto	u320
  1329  0668                     u321:
  1330  0668  2E44               	goto	l883
  1331  0669                     u320:
  1332  0669                     l893:
  1333  0669  0877               	movf	___lwdiv@quotient+1,w
  1334  066A  00F2               	movwf	?___lwdiv+1
  1335  066B  0876               	movf	___lwdiv@quotient,w
  1336  066C  00F1               	movwf	?___lwdiv
  1337  066D                     l443:
  1338  066D  0008               	return
  1339  066E                     __end_of___lwdiv:
  1340  007E                     btemp	set	126	;btemp
  1341  007E                     wtemp0	set	126
  1342                           
  1343                           	psect	config
  1344                           
  1345                           ;Config register CONFIG @ 0x2007
  1346                           ;	Oscillator Selection bits
  1347                           ;	FOSC = HS, HS oscillator
  1348                           ;	Watchdog Timer Enable bit
  1349                           ;	WDTE = OFF, WDT disabled
  1350                           ;	Power-up Timer Enable bit
  1351                           ;	PWRTE = OFF, PWRT disabled
  1352                           ;	Brown-out Reset Enable bit
  1353                           ;	BOREN = OFF, BOR disabled
  1354                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1355                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1356                           ;	Data EEPROM Memory Code Protection bit
  1357                           ;	CPD = OFF, Data EEPROM code protection off
  1358                           ;	Flash Program Memory Write Enable bits
  1359                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1360                           ;	In-Circuit Debugger Mode bit
  1361                           ;	DEBUG = 0x1, unprogrammed default
  1362                           ;	Flash Program Memory Code Protection bit
  1363                           ;	CP = OFF, Code protection off
  1364  2007                     	org	8199
  1365  2007  3F3A               	dw	16186

Data Sizes:
    Strings     19
    Constant    10
    Data        24
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     13      13
    BANK0            80     17      43
    BANK1            80      0       0
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 19
		 -> STR_1(CODE[19]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 24
		 -> txt(BANK0[24]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1303
                                             14 BANK0      3     3      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1211
                                              1 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     5     1      4
                                              0 BANK0      1     1      0
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               55      0       0       9        0.0%
BITBANK3            55      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     11      2B       5       53.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               D      D       D       1      100.0%
BITCOMMON            D      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      38      12        0.0%
ABS                  0      0      38       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Fri Jan 29 14:29:57 2021

                      pc 0002                       l41 06A6                       l51 06E3  
                     l45 06C3                       l46 06C4                       fsr 0004  
                    l167 07EB                      l443 066D                      l453 0629  
                    l901 05F9                      l911 0618                      l903 0600  
                    l913 061F                      l905 0604                      l921 070C  
                    l907 0608                      l915 0625                      l931 071F  
                    l923 0712                      l909 0612                      l941 0750  
                    l933 073C                      l925 0719                      l871 062A  
                    l943 0755                      l935 0744                      l927 071E  
                    l919 0707                      l881 0640                      l873 062C  
                    l961 078E                      l953 0773                      l937 0748  
                    l891 0663                      l883 0644                      l875 0632  
                    l963 0793                      l955 077D                      l939 074C  
                    l971 07D5                      l885 0655                      l877 0635  
                    l893 0669                      l965 07C1                      l957 0783  
                    l949 0757                      l973 07E7                      l981 066E  
                    l887 065B                      l879 063C                      l967 07C8  
                    l959 078A                      l991 067D                      l983 0674  
                    l889 065C                      l897 05EE                      l969 07CC  
                    l993 067E                      l985 0678                      l899 05F4  
                    l995 067F                      l987 067B                      l997 0682  
                    l989 067C                      l999 0683                      u300 0655  
                    u301 0654                      u320 0669                      u400 074C  
                    u321 0668                      u305 0651                      u401 074B  
                    u330 05F4                      u410 0772                      u315 065D  
                    u331 05F3                      u411 0771                      u260 0632  
                    u420 077D                      u500 0700                      u261 0631  
                    u421 077C                      u501 06FF                      u350 0608  
                    u430 0783                      u351 0607                      u431 0782  
                    u415 076E                      u280 0644                      u360 0612  
                    u440 07D5                      u281 0643                      u361 0611  
                    u345 05FA                      u441 07D4                      u450 07E7  
                    u275 0636                      u451 07E6                      u380 0625  
                    u460 06AC                      u381 0624                      u365 060E  
                    u461 06AB                      u517 068E                      u390 0712  
                    u470 06C3                      u295 0645                      u375 0619  
                    u391 0711                      u471 06C2                      u480 06C8  
                    u481 06C7                      u490 06E9                      u491 06E8  
                    fsr0 0004                      _txt 0020                      indf 0000  
                   l1001 0684                     l1011 0691                     l1003 0685  
                   l1021 069C                     l1013 0695                     l1005 0686  
                   l1031 06BA                     l1023 069F                     l1015 0697  
                   l1007 0687                     l1041 06F1                     l1033 06C8  
                   l1025 06A0                     l1017 0698                     l1009 068A  
                   l1043 06F7                     l1035 06D0                     l1027 06AC  
                   l1019 0699                     l1037 06DE                     l1029 06B4  
                   l1039 06E9                     l1065 0731                     STR_1 0014  
                   _main 066E                     btemp 007E                     start 0001  
                  ?_main 0071          __end_of___lwdiv 066E          __end_of___lwmod 062A  
                  _SPBRG 0099                    _PORTD 0008                    _TRISA 0085  
                  _TRISC 0087                    _TRISD 0088                    _TXREG 0019  
        __end_of_dpowers 0014                    main@k 0047                    pclath 000A  
                  status 0003                    wtemp0 007E          __end_of_sprintf 07EC  
        __initialization 07EC             __end_of_main 0704                   ??_main 0046  
                 _ADRESH 001E                   _ADRESL 009E                ??___lwdiv 0075  
              ??___lwmod 007D                ??_sprintf 003C  __end_of__initialization 07FC  
         __pcstackCOMMON 0071             __pidataBANK0 05D6               __pbssBANK0 0049  
             __pmaintext 066E               __stringtab 0004                  ___lwdiv 062A  
                ___lwmod 05EE                  __ptext1 0704                  __ptext2 05EE  
                __ptext3 062A                  _dpowers 000A                  _sprintf 0704  
   end_of_initialization 07FC                _RCSTAbits 0018                _TXSTAbits 0098  
    start_initialization 07EC               init_fetch0 05C3              __pdataBANK0 0020  
              ___latbits 0002            __pcstackBANK0 0038              sprintf@flag 0040  
            sprintf@prec 0041         ___lwdiv@dividend 0073                 ?___lwdiv 0071  
               ?___lwmod 0079                __pstrings 0004         ___lwdiv@quotient 0076  
               ?_sprintf 0039                 _PIE1bits 008C               _ADCON0bits 001F  
            __stringbase 0009               _ADCON1bits 009F         __size_of___lwdiv 0044  
       __size_of___lwmod 003C                 _adc_data 0049       __end_of__stringtab 000A  
             sprintf@val 0042          ___lwdiv@divisor 0071          ___lwdiv@counter 0078  
       __size_of_sprintf 00E8            __size_of_main 0096                 init_ram0 05C7  
              sprintf@ap 003F                sprintf@sp 0044         ___lwmod@dividend 007B  
              stringcode 0004                 sprintf@c 0045                 sprintf@f 0039  
        ___lwmod@divisor 0079          ___lwmod@counter 0038                 stringdir 0004  
               stringtab 0004  
