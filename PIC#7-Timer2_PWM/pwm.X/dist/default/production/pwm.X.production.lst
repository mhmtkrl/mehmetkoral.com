

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Thu Jan 28 18:41:41 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	intentry,global,class=CODE,delta=2
    11                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 2.20
    15                           ; Generated 12/02/2020 GMT
    16                           ; 
    17                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F877A Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  0091                     	;# 
    93  0092                     	;# 
    94  0093                     	;# 
    95  0094                     	;# 
    96  0098                     	;# 
    97  0099                     	;# 
    98  009C                     	;# 
    99  009D                     	;# 
   100  009E                     	;# 
   101  009F                     	;# 
   102  010C                     	;# 
   103  010D                     	;# 
   104  010E                     	;# 
   105  010F                     	;# 
   106  018C                     	;# 
   107  018D                     	;# 
   108  0000                     	;# 
   109  0001                     	;# 
   110  0002                     	;# 
   111  0003                     	;# 
   112  0004                     	;# 
   113  0005                     	;# 
   114  0006                     	;# 
   115  0007                     	;# 
   116  0008                     	;# 
   117  0009                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000D                     	;# 
   122  000E                     	;# 
   123  000E                     	;# 
   124  000F                     	;# 
   125  0010                     	;# 
   126  0011                     	;# 
   127  0012                     	;# 
   128  0013                     	;# 
   129  0014                     	;# 
   130  0015                     	;# 
   131  0015                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001B                     	;# 
   138  001B                     	;# 
   139  001C                     	;# 
   140  001D                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  0081                     	;# 
   144  0085                     	;# 
   145  0086                     	;# 
   146  0087                     	;# 
   147  0088                     	;# 
   148  0089                     	;# 
   149  008C                     	;# 
   150  008D                     	;# 
   151  008E                     	;# 
   152  0091                     	;# 
   153  0092                     	;# 
   154  0093                     	;# 
   155  0094                     	;# 
   156  0098                     	;# 
   157  0099                     	;# 
   158  009C                     	;# 
   159  009D                     	;# 
   160  009E                     	;# 
   161  009F                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  010F                     	;# 
   166  018C                     	;# 
   167  018D                     	;# 
   168                           
   169                           	psect	nvCOMMON
   170  0076                     __pnvCOMMON:
   171  0076                     _duty_cycle:
   172  0076                     	ds	2
   173  001B                     _CCPR2L	set	27
   174  0015                     _CCPR1L	set	21
   175  0008                     _PORTD	set	8
   176  001D                     _CCP2CONbits	set	29
   177  0017                     _CCP1CONbits	set	23
   178  000B                     _INTCONbits	set	11
   179  0012                     _T2CONbits	set	18
   180  0008                     _PORTDbits	set	8
   181  000C                     _PIR1bits	set	12
   182  0088                     _TRISD	set	136
   183  0087                     _TRISC	set	135
   184  008C                     _PIE1bits	set	140
   185  0092                     _PR2	set	146
   186                           
   187                           	psect	cinit
   188  000F                     start_initialization:	
   189                           ; #config settings
   190                           
   191  000F                     __initialization:
   192                           
   193                           ; Clear objects allocated to COMMON
   194  000F  01F8               	clrf	__pbssCOMMON& (0+127)
   195  0010  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   196  0011                     end_of_initialization:	
   197                           ;End of C runtime variable initialization code
   198                           
   199  0011                     __end_of__initialization:
   200  0011  0183               	clrf	3
   201  0012  120A  118A  2815   	ljmp	_main	;jump to C main() function
   202                           
   203                           	psect	bssCOMMON
   204  0078                     __pbssCOMMON:
   205  0078                     _i:
   206  0078                     	ds	2
   207                           
   208                           	psect	cstackCOMMON
   209  0070                     __pcstackCOMMON:
   210  0070                     ?_my_isr:
   211  0070                     ??_my_isr:	
   212                           ; 1 bytes @ 0x0
   213                           
   214  0070                     ?_main:	
   215                           ; 1 bytes @ 0x0
   216                           
   217                           
   218                           ; 1 bytes @ 0x0
   219  0070                     	ds	2
   220  0072                     ??_main:
   221                           
   222                           ; 1 bytes @ 0x2
   223  0072                     	ds	4
   224                           
   225                           	psect	maintext
   226  0015                     __pmaintext:	
   227 ;;
   228 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   229 ;;
   230 ;; *************** function _main *****************
   231 ;; Defined at:
   232 ;;		line 40 in file "main.c"
   233 ;; Parameters:    Size  Location     Type
   234 ;;		None
   235 ;; Auto vars:     Size  Location     Type
   236 ;;		None
   237 ;; Return value:  Size  Location     Type
   238 ;;                  1    wreg      void 
   239 ;; Registers used:
   240 ;;		wreg, status,2, status,0, btemp+1
   241 ;; Tracked objects:
   242 ;;		On entry : B00/0
   243 ;;		On exit  : 0/0
   244 ;;		Unchanged: 0/0
   245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   246 ;;      Params:         0       0       0       0       0
   247 ;;      Locals:         0       0       0       0       0
   248 ;;      Temps:          4       0       0       0       0
   249 ;;      Totals:         4       0       0       0       0
   250 ;;Total ram usage:        4 bytes
   251 ;; Hardware stack levels required when called:    1
   252 ;; This function calls:
   253 ;;		Nothing
   254 ;; This function is called by:
   255 ;;		Startup code after reset
   256 ;; This function uses a non-reentrant model
   257 ;;
   258                           
   259                           
   260                           ;psect for function _main
   261  0015                     _main:
   262  0015                     l662:	
   263                           ;incstack = 0
   264                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1]
   265                           
   266                           
   267                           ;main.c: 48:     T2CONbits.T2CKPS1 = 0;
   268  0015  1283               	bcf	3,5	;RP0=0, select bank0
   269  0016  1303               	bcf	3,6	;RP1=0, select bank0
   270  0017  1092               	bcf	18,1	;volatile
   271                           
   272                           ;main.c: 49:     T2CONbits.T2CKPS0 = 0;
   273  0018  1012               	bcf	18,0	;volatile
   274                           
   275                           ;main.c: 51:     T2CONbits.TOUTPS3 = 1;
   276  0019  1712               	bsf	18,6	;volatile
   277                           
   278                           ;main.c: 52:     T2CONbits.TOUTPS2 = 0;
   279  001A  1292               	bcf	18,5	;volatile
   280                           
   281                           ;main.c: 53:     T2CONbits.TOUTPS1 = 1;
   282  001B  1612               	bsf	18,4	;volatile
   283                           
   284                           ;main.c: 54:     T2CONbits.TOUTPS0 = 0;
   285  001C  1192               	bcf	18,3	;volatile
   286                           
   287                           ;main.c: 56:     T2CONbits.TMR2ON = 1;
   288  001D  1512               	bsf	18,2	;volatile
   289                           
   290                           ;main.c: 58:     INTCONbits.GIE = 1;
   291  001E  178B               	bsf	11,7	;volatile
   292                           
   293                           ;main.c: 59:     INTCONbits.PEIE = 1;
   294  001F  170B               	bsf	11,6	;volatile
   295                           
   296                           ;main.c: 60:     PIE1bits.TMR2IE = 1;
   297  0020  1683               	bsf	3,5	;RP0=1, select bank1
   298  0021  1303               	bcf	3,6	;RP1=0, select bank1
   299  0022  148C               	bsf	12,1	;volatile
   300                           
   301                           ;main.c: 62:     CCP1CONbits.CCP1M3 = 1;
   302  0023  1283               	bcf	3,5	;RP0=0, select bank0
   303  0024  1303               	bcf	3,6	;RP1=0, select bank0
   304  0025  1597               	bsf	23,3	;volatile
   305                           
   306                           ;main.c: 63:     CCP1CONbits.CCP1M2 = 1;
   307  0026  1517               	bsf	23,2	;volatile
   308                           
   309                           ;main.c: 64:     CCP1CONbits.CCP1M1 = 1;
   310  0027  1497               	bsf	23,1	;volatile
   311                           
   312                           ;main.c: 65:     CCP1CONbits.CCP1M0 = 1;
   313  0028  1417               	bsf	23,0	;volatile
   314                           
   315                           ;main.c: 67:     CCP2CONbits.CCP2M3 = 1;
   316  0029  159D               	bsf	29,3	;volatile
   317                           
   318                           ;main.c: 68:     CCP2CONbits.CCP2M2 = 1;
   319  002A  151D               	bsf	29,2	;volatile
   320                           
   321                           ;main.c: 69:     CCP2CONbits.CCP2M1 = 1;
   322  002B  149D               	bsf	29,1	;volatile
   323                           
   324                           ;main.c: 70:     CCP2CONbits.CCP2M0 = 1;
   325  002C  141D               	bsf	29,0	;volatile
   326  002D                     l664:
   327                           
   328                           ;main.c: 79:     PR2 = 255;
   329  002D  30FF               	movlw	255
   330  002E  1683               	bsf	3,5	;RP0=1, select bank1
   331  002F  1303               	bcf	3,6	;RP1=0, select bank1
   332  0030  0092               	movwf	18	;volatile
   333                           
   334                           ;main.c: 81:     TRISC = 0xF9;
   335  0031  30F9               	movlw	249
   336  0032  0087               	movwf	7	;volatile
   337                           
   338                           ;main.c: 83:     TRISD = 0xFE;
   339  0033  30FE               	movlw	254
   340  0034  0088               	movwf	8	;volatile
   341  0035                     l666:
   342                           
   343                           ;main.c: 84:     PORTD = 0x00;
   344  0035  1283               	bcf	3,5	;RP0=0, select bank0
   345  0036  1303               	bcf	3,6	;RP1=0, select bank0
   346  0037  0188               	clrf	8	;volatile
   347  0038                     l668:
   348                           
   349                           ;main.c: 87:         for(duty_cycle = 0 ; duty_cycle < 1024 ; duty_cycle++) {
   350  0038  01F6               	clrf	_duty_cycle
   351  0039  01F7               	clrf	_duty_cycle+1
   352  003A                     l674:
   353                           
   354                           ;main.c: 88:             CCPR1L = duty_cycle >> 2;
   355  003A  0877               	movf	_duty_cycle+1,w
   356  003B  00F3               	movwf	??_main+1
   357  003C  0876               	movf	_duty_cycle,w
   358  003D  00F2               	movwf	??_main
   359  003E  0D73               	rlf	??_main+1,w
   360  003F  0CF3               	rrf	??_main+1,f
   361  0040  0CF2               	rrf	??_main,f
   362  0041  0D73               	rlf	??_main+1,w
   363  0042  0CF3               	rrf	??_main+1,f
   364  0043  0CF2               	rrf	??_main,f
   365  0044  0872               	movf	??_main,w
   366  0045  1283               	bcf	3,5	;RP0=0, select bank0
   367  0046  1303               	bcf	3,6	;RP1=0, select bank0
   368  0047  0095               	movwf	21	;volatile
   369  0048                     l676:
   370                           
   371                           ;main.c: 89:             CCP1CONbits.CCP1X = duty_cycle & 0x002;
   372  0048  0876               	movf	_duty_cycle,w
   373  0049  3902               	andlw	2
   374  004A  00F2               	movwf	??_main
   375  004B  0EF2               	swapf	??_main,f
   376  004C  0DF2               	rlf	??_main,f
   377  004D  0817               	movf	23,w	;volatile
   378  004E  0672               	xorwf	??_main,w
   379  004F  39DF               	andlw	-33
   380  0050  0672               	xorwf	??_main,w
   381  0051  0097               	movwf	23	;volatile
   382  0052                     l678:
   383                           
   384                           ;main.c: 90:             CCP1CONbits.CCP1Y = duty_cycle & 0x001;
   385  0052  0876               	movf	_duty_cycle,w
   386  0053  3901               	andlw	1
   387  0054  00F2               	movwf	??_main
   388  0055  0EF2               	swapf	??_main,f
   389  0056  0817               	movf	23,w	;volatile
   390  0057  0672               	xorwf	??_main,w
   391  0058  39EF               	andlw	-17
   392  0059  0672               	xorwf	??_main,w
   393  005A  0097               	movwf	23	;volatile
   394  005B                     l680:
   395                           
   396                           ;main.c: 92:             CCPR2L = (1023 - duty_cycle) >> 2;
   397  005B  30FF               	movlw	255
   398  005C  00F2               	movwf	??_main
   399  005D  3003               	movlw	3
   400  005E  00F3               	movwf	??_main+1
   401  005F  0876               	movf	_duty_cycle,w
   402  0060  0272               	subwf	??_main,w
   403  0061  00F4               	movwf	??_main+2
   404  0062  0877               	movf	_duty_cycle+1,w
   405  0063  1C03               	skipc
   406  0064  0A77               	incf	_duty_cycle+1,w
   407  0065  0273               	subwf	??_main+1,w
   408  0066  00F5               	movwf	??_main+3
   409  0067  0D75               	rlf	??_main+3,w
   410  0068  0CF5               	rrf	??_main+3,f
   411  0069  0CF4               	rrf	??_main+2,f
   412  006A  0D75               	rlf	??_main+3,w
   413  006B  0CF5               	rrf	??_main+3,f
   414  006C  0CF4               	rrf	??_main+2,f
   415  006D  0874               	movf	??_main+2,w
   416  006E  009B               	movwf	27	;volatile
   417  006F                     l682:
   418                           
   419                           ;main.c: 93:             CCP2CONbits.CCP2X = (1023 - duty_cycle) & 0x002;
   420  006F  0976               	comf	_duty_cycle,w
   421  0070  3902               	andlw	2
   422  0071  00F2               	movwf	??_main
   423  0072  0EF2               	swapf	??_main,f
   424  0073  0DF2               	rlf	??_main,f
   425  0074  081D               	movf	29,w	;volatile
   426  0075  0672               	xorwf	??_main,w
   427  0076  39DF               	andlw	-33
   428  0077  0672               	xorwf	??_main,w
   429  0078  009D               	movwf	29	;volatile
   430  0079                     l684:
   431                           
   432                           ;main.c: 94:             CCP2CONbits.CCP2Y = (1023 - duty_cycle) & 0x001;
   433  0079  0976               	comf	_duty_cycle,w
   434  007A  3901               	andlw	1
   435  007B  00F2               	movwf	??_main
   436  007C  0EF2               	swapf	??_main,f
   437  007D  081D               	movf	29,w	;volatile
   438  007E  0672               	xorwf	??_main,w
   439  007F  39EF               	andlw	-17
   440  0080  0672               	xorwf	??_main,w
   441  0081  009D               	movwf	29	;volatile
   442  0082                     l686:
   443                           
   444                           ;main.c: 95:             _delay((unsigned long)((1)*(20000000/4000.0)));
   445  0082  3007               	movlw	7
   446  0083  00F3               	movwf	??_main+1
   447  0084  307D               	movlw	125
   448  0085  00F2               	movwf	??_main
   449  0086                     u67:
   450  0086  0BF2               	decfsz	??_main,f
   451  0087  2886               	goto	u67
   452  0088  0BF3               	decfsz	??_main+1,f
   453  0089  2886               	goto	u67
   454  008A                     l688:
   455                           
   456                           ;main.c: 96:         }
   457  008A  3001               	movlw	1
   458  008B  07F6               	addwf	_duty_cycle,f
   459  008C  1803               	skipnc
   460  008D  0AF7               	incf	_duty_cycle+1,f
   461  008E  3000               	movlw	0
   462  008F  07F7               	addwf	_duty_cycle+1,f
   463  0090                     l690:
   464  0090  0877               	movf	_duty_cycle+1,w
   465  0091  3A80               	xorlw	128
   466  0092  00FF               	movwf	btemp+1
   467  0093  3084               	movlw	132
   468  0094  027F               	subwf	btemp+1,w
   469  0095  1D03               	skipz
   470  0096  2899               	goto	u45
   471  0097  3000               	movlw	0
   472  0098  0276               	subwf	_duty_cycle,w
   473  0099                     u45:
   474  0099  1C03               	skipc
   475  009A  289C               	goto	u41
   476  009B  289D               	goto	u40
   477  009C                     u41:
   478  009C  283A               	goto	l674
   479  009D                     u40:
   480  009D                     l692:
   481                           
   482                           ;main.c: 97:         for(duty_cycle = 1023 ; duty_cycle >= 0 ; duty_cycle--) {
   483  009D  30FF               	movlw	255
   484  009E  00F6               	movwf	_duty_cycle
   485  009F  3003               	movlw	3
   486  00A0  00F7               	movwf	_duty_cycle+1
   487  00A1                     l698:
   488                           
   489                           ;main.c: 98:             CCPR1L = duty_cycle >> 2;
   490  00A1  0877               	movf	_duty_cycle+1,w
   491  00A2  00F3               	movwf	??_main+1
   492  00A3  0876               	movf	_duty_cycle,w
   493  00A4  00F2               	movwf	??_main
   494  00A5  0D73               	rlf	??_main+1,w
   495  00A6  0CF3               	rrf	??_main+1,f
   496  00A7  0CF2               	rrf	??_main,f
   497  00A8  0D73               	rlf	??_main+1,w
   498  00A9  0CF3               	rrf	??_main+1,f
   499  00AA  0CF2               	rrf	??_main,f
   500  00AB  0872               	movf	??_main,w
   501  00AC  1283               	bcf	3,5	;RP0=0, select bank0
   502  00AD  1303               	bcf	3,6	;RP1=0, select bank0
   503  00AE  0095               	movwf	21	;volatile
   504  00AF                     l700:
   505                           
   506                           ;main.c: 99:             CCP1CONbits.CCP1X = duty_cycle & 0x002;
   507  00AF  0876               	movf	_duty_cycle,w
   508  00B0  3902               	andlw	2
   509  00B1  00F2               	movwf	??_main
   510  00B2  0EF2               	swapf	??_main,f
   511  00B3  0DF2               	rlf	??_main,f
   512  00B4  0817               	movf	23,w	;volatile
   513  00B5  0672               	xorwf	??_main,w
   514  00B6  39DF               	andlw	-33
   515  00B7  0672               	xorwf	??_main,w
   516  00B8  0097               	movwf	23	;volatile
   517  00B9                     l702:
   518                           
   519                           ;main.c: 100:             CCP1CONbits.CCP1Y = duty_cycle & 0x001;
   520  00B9  0876               	movf	_duty_cycle,w
   521  00BA  3901               	andlw	1
   522  00BB  00F2               	movwf	??_main
   523  00BC  0EF2               	swapf	??_main,f
   524  00BD  0817               	movf	23,w	;volatile
   525  00BE  0672               	xorwf	??_main,w
   526  00BF  39EF               	andlw	-17
   527  00C0  0672               	xorwf	??_main,w
   528  00C1  0097               	movwf	23	;volatile
   529  00C2                     l704:
   530                           
   531                           ;main.c: 102:             CCPR2L = (1023 - duty_cycle) >> 2;
   532  00C2  30FF               	movlw	255
   533  00C3  00F2               	movwf	??_main
   534  00C4  3003               	movlw	3
   535  00C5  00F3               	movwf	??_main+1
   536  00C6  0876               	movf	_duty_cycle,w
   537  00C7  0272               	subwf	??_main,w
   538  00C8  00F4               	movwf	??_main+2
   539  00C9  0877               	movf	_duty_cycle+1,w
   540  00CA  1C03               	skipc
   541  00CB  0A77               	incf	_duty_cycle+1,w
   542  00CC  0273               	subwf	??_main+1,w
   543  00CD  00F5               	movwf	??_main+3
   544  00CE  0D75               	rlf	??_main+3,w
   545  00CF  0CF5               	rrf	??_main+3,f
   546  00D0  0CF4               	rrf	??_main+2,f
   547  00D1  0D75               	rlf	??_main+3,w
   548  00D2  0CF5               	rrf	??_main+3,f
   549  00D3  0CF4               	rrf	??_main+2,f
   550  00D4  0874               	movf	??_main+2,w
   551  00D5  009B               	movwf	27	;volatile
   552  00D6                     l706:
   553                           
   554                           ;main.c: 103:             CCP2CONbits.CCP2X = (1023 - duty_cycle) & 0x002;
   555  00D6  0976               	comf	_duty_cycle,w
   556  00D7  3902               	andlw	2
   557  00D8  00F2               	movwf	??_main
   558  00D9  0EF2               	swapf	??_main,f
   559  00DA  0DF2               	rlf	??_main,f
   560  00DB  081D               	movf	29,w	;volatile
   561  00DC  0672               	xorwf	??_main,w
   562  00DD  39DF               	andlw	-33
   563  00DE  0672               	xorwf	??_main,w
   564  00DF  009D               	movwf	29	;volatile
   565  00E0                     l708:
   566                           
   567                           ;main.c: 104:             CCP2CONbits.CCP2Y = (1023 - duty_cycle) & 0x001;
   568  00E0  0976               	comf	_duty_cycle,w
   569  00E1  3901               	andlw	1
   570  00E2  00F2               	movwf	??_main
   571  00E3  0EF2               	swapf	??_main,f
   572  00E4  081D               	movf	29,w	;volatile
   573  00E5  0672               	xorwf	??_main,w
   574  00E6  39EF               	andlw	-17
   575  00E7  0672               	xorwf	??_main,w
   576  00E8  009D               	movwf	29	;volatile
   577  00E9                     l710:
   578                           
   579                           ;main.c: 105:             _delay((unsigned long)((1)*(20000000/4000.0)));
   580  00E9  3007               	movlw	7
   581  00EA  00F3               	movwf	??_main+1
   582  00EB  307D               	movlw	125
   583  00EC  00F2               	movwf	??_main
   584  00ED                     u77:
   585  00ED  0BF2               	decfsz	??_main,f
   586  00EE  28ED               	goto	u77
   587  00EF  0BF3               	decfsz	??_main+1,f
   588  00F0  28ED               	goto	u77
   589  00F1                     l712:
   590                           
   591                           ;main.c: 106:         }
   592  00F1  30FF               	movlw	255
   593  00F2  07F6               	addwf	_duty_cycle,f
   594  00F3  1803               	skipnc
   595  00F4  0AF7               	incf	_duty_cycle+1,f
   596  00F5  30FF               	movlw	255
   597  00F6  07F7               	addwf	_duty_cycle+1,f
   598  00F7                     l714:
   599  00F7  1FF7               	btfss	_duty_cycle+1,7
   600  00F8  28FA               	goto	u51
   601  00F9  28FB               	goto	u50
   602  00FA                     u51:
   603  00FA  28A1               	goto	l698
   604  00FB                     u50:
   605  00FB  2838               	goto	l668
   606  00FC  120A  118A  280C   	ljmp	start
   607  00FF                     __end_of_main:
   608                           
   609                           	psect	text1
   610  00FF                     __ptext1:	
   611 ;; *************** function _my_isr *****************
   612 ;; Defined at:
   613 ;;		line 18 in file "main.c"
   614 ;; Parameters:    Size  Location     Type
   615 ;;		None
   616 ;; Auto vars:     Size  Location     Type
   617 ;;		None
   618 ;; Return value:  Size  Location     Type
   619 ;;                  1    wreg      void 
   620 ;; Registers used:
   621 ;;		wreg, status,2, status,0
   622 ;; Tracked objects:
   623 ;;		On entry : 0/0
   624 ;;		On exit  : 0/0
   625 ;;		Unchanged: 0/0
   626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   627 ;;      Params:         0       0       0       0       0
   628 ;;      Locals:         0       0       0       0       0
   629 ;;      Temps:          2       0       0       0       0
   630 ;;      Totals:         2       0       0       0       0
   631 ;;Total ram usage:        2 bytes
   632 ;; Hardware stack levels used:    1
   633 ;; This function calls:
   634 ;;		Nothing
   635 ;; This function is called by:
   636 ;;		Interrupt level 1
   637 ;; This function uses a non-reentrant model
   638 ;;
   639                           
   640                           
   641                           ;psect for function _my_isr
   642  00FF                     _my_isr:
   643  00FF                     i1l644:
   644                           
   645                           ;main.c: 19:     if(PIR1bits.TMR2IF) {
   646  00FF  1283               	bcf	3,5	;RP0=0, select bank0
   647  0100  1303               	bcf	3,6	;RP1=0, select bank0
   648  0101  1C8C               	btfss	12,1	;volatile
   649  0102  2904               	goto	u1_21
   650  0103  2905               	goto	u1_20
   651  0104                     u1_21:
   652  0104  2926               	goto	i1l40
   653  0105                     u1_20:
   654  0105                     i1l646:
   655                           
   656                           ;main.c: 20:         i++;
   657  0105  3001               	movlw	1
   658  0106  07F8               	addwf	_i,f
   659  0107  1803               	skipnc
   660  0108  0AF9               	incf	_i+1,f
   661  0109  3000               	movlw	0
   662  010A  07F9               	addwf	_i+1,f
   663  010B                     i1l648:
   664                           
   665                           ;main.c: 28:         if(i == 195) {
   666  010B  30C3               	movlw	195
   667  010C  0678               	xorwf	_i,w
   668  010D  0479               	iorwf	_i+1,w
   669  010E  1D03               	btfss	3,2
   670  010F  2911               	goto	u2_21
   671  0110  2912               	goto	u2_20
   672  0111                     u2_21:
   673  0111  2913               	goto	i1l652
   674  0112                     u2_20:
   675  0112                     i1l650:
   676                           
   677                           ;main.c: 29:             PORTDbits.RD0 = 0;
   678  0112  1008               	bcf	8,0	;volatile
   679  0113                     i1l652:
   680                           
   681                           ;main.c: 31:         if(i == 390) {
   682  0113  3086               	movlw	134
   683  0114  0678               	xorwf	_i,w
   684  0115  1D03               	skipz
   685  0116  291B               	goto	u3_21
   686  0117  0379               	decf	_i+1,w
   687  0118  1D03               	btfss	3,2
   688  0119  291B               	goto	u3_21
   689  011A  291C               	goto	u3_20
   690  011B                     u3_21:
   691  011B  291F               	goto	i1l658
   692  011C                     u3_20:
   693  011C                     i1l654:
   694                           
   695                           ;main.c: 32:             PORTDbits.RD0 = 1;
   696  011C  1408               	bsf	8,0	;volatile
   697  011D                     i1l656:
   698                           
   699                           ;main.c: 33:             i = 0;
   700  011D  01F8               	clrf	_i
   701  011E  01F9               	clrf	_i+1
   702  011F                     i1l658:
   703                           
   704                           ;main.c: 35:         PR2 = 255;
   705  011F  30FF               	movlw	255
   706  0120  1683               	bsf	3,5	;RP0=1, select bank1
   707  0121  1303               	bcf	3,6	;RP1=0, select bank1
   708  0122  0092               	movwf	18	;volatile
   709  0123                     i1l660:
   710                           
   711                           ;main.c: 36:         PIR1bits.TMR2IF = 0;
   712  0123  1283               	bcf	3,5	;RP0=0, select bank0
   713  0124  1303               	bcf	3,6	;RP1=0, select bank0
   714  0125  108C               	bcf	12,1	;volatile
   715  0126                     i1l40:
   716  0126  0871               	movf	??_my_isr+1,w
   717  0127  008A               	movwf	10
   718  0128  0E70               	swapf	??_my_isr,w
   719  0129  0083               	movwf	3
   720  012A  0EFE               	swapf	btemp,f
   721  012B  0E7E               	swapf	btemp,w
   722  012C  0009               	retfie
   723  012D                     __end_of_my_isr:
   724  007E                     btemp	set	126	;btemp
   725  007E                     wtemp0	set	126
   726                           
   727                           	psect	intentry
   728  0004                     __pintentry:	
   729                           ;incstack = 0
   730                           ; Regs used in _my_isr: [wreg+status,2+status,0]
   731                           
   732  0004                     interrupt_function:
   733  007E                     saved_w	set	btemp
   734  0004  00FE               	movwf	btemp
   735  0005  0E03               	swapf	3,w
   736  0006  00F0               	movwf	??_my_isr
   737  0007  080A               	movf	10,w
   738  0008  00F1               	movwf	??_my_isr+1
   739  0009  120A  118A  28FF   	ljmp	_my_isr
   740                           
   741                           	psect	config
   742                           
   743                           ;Config register CONFIG @ 0x2007
   744                           ;	Oscillator Selection bits
   745                           ;	FOSC = HS, HS oscillator
   746                           ;	Watchdog Timer Enable bit
   747                           ;	WDTE = OFF, WDT disabled
   748                           ;	Power-up Timer Enable bit
   749                           ;	PWRTE = OFF, PWRT disabled
   750                           ;	Brown-out Reset Enable bit
   751                           ;	BOREN = OFF, BOR disabled
   752                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   753                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   754                           ;	Data EEPROM Memory Code Protection bit
   755                           ;	CPD = OFF, Data EEPROM code protection off
   756                           ;	Flash Program Memory Write Enable bits
   757                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   758                           ;	In-Circuit Debugger Mode bit
   759                           ;	DEBUG = 0x1, unprogrammed default
   760                           ;	Flash Program Memory Code Protection bit
   761                           ;	CP = OFF, Code protection off
   762  2007                     	org	8199
   763  2007  3F3A               	dw	16186

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _my_isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _my_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _my_isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _my_isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _my_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0       0
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _my_isr                                               2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _my_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       A      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Thu Jan 28 18:41:41 2021

                      _i 0078                       u40 009D                       u41 009C  
                     u50 00FB                       u51 00FA                       u45 0099  
                     u67 0086                       u77 00ED                      l700 00AF  
                    l710 00E9                      l702 00B9                      l712 00F1  
                    l704 00C2                      l714 00F7                      l706 00D6  
                    l708 00E0                      l662 0015                      l680 005B  
                    l664 002D                      l690 0090                      l682 006F  
                    l674 003A                      l666 0035                      l692 009D  
                    l684 0079                      l676 0048                      l668 0038  
                    l686 0082                      l678 0052                      l688 008A  
                    l698 00A1                      _PR2 0092                     i1l40 0126  
                   u1_20 0105                     u1_21 0104                     u2_20 0112  
                   u2_21 0111                     u3_20 011C                     u3_21 011B  
                   _main 0015                     btemp 007E                     start 000C  
                  ?_main 0070                    i1l650 0112                    i1l660 0123  
                  i1l652 0113                    i1l644 00FF                    i1l654 011C  
                  i1l646 0105                    i1l656 011D                    i1l648 010B  
                  i1l658 011F                    _PORTD 0008                    _TRISC 0087  
                  _TRISD 0088                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 000F             __end_of_main 00FF  
                 ??_main 0072                   _CCPR1L 0015                   _CCPR2L 001B  
                 _my_isr 00FF                   saved_w 007E  __end_of__initialization 0011  
         __pcstackCOMMON 0070               __pnvCOMMON 0076               __pmaintext 0015  
             __pintentry 0004                  ?_my_isr 0070                  __ptext1 00FF  
        __size_of_my_isr 002E                _T2CONbits 0012               _duty_cycle 0076  
   end_of_initialization 0011                _PORTDbits 0008              _CCP1CONbits 0017  
            _CCP2CONbits 001D           __end_of_my_isr 012D      start_initialization 000F  
               ??_my_isr 0070              __pbssCOMMON 0078                ___latbits 0002  
      interrupt_function 0004                 _PIE1bits 008C                 _PIR1bits 000C  
          __size_of_main 00EA               _INTCONbits 000B                 intlevel1 0000  
