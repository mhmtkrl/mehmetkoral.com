

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Thu Jan 28 17:59:14 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	intentry,global,class=CODE,delta=2
    11                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 2.20
    15                           ; Generated 12/02/2020 GMT
    16                           ; 
    17                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F877A Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  0091                     	;# 
    93  0092                     	;# 
    94  0093                     	;# 
    95  0094                     	;# 
    96  0098                     	;# 
    97  0099                     	;# 
    98  009C                     	;# 
    99  009D                     	;# 
   100  009E                     	;# 
   101  009F                     	;# 
   102  010C                     	;# 
   103  010D                     	;# 
   104  010E                     	;# 
   105  010F                     	;# 
   106  018C                     	;# 
   107  018D                     	;# 
   108  0000                     	;# 
   109  0001                     	;# 
   110  0002                     	;# 
   111  0003                     	;# 
   112  0004                     	;# 
   113  0005                     	;# 
   114  0006                     	;# 
   115  0007                     	;# 
   116  0008                     	;# 
   117  0009                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000D                     	;# 
   122  000E                     	;# 
   123  000E                     	;# 
   124  000F                     	;# 
   125  0010                     	;# 
   126  0011                     	;# 
   127  0012                     	;# 
   128  0013                     	;# 
   129  0014                     	;# 
   130  0015                     	;# 
   131  0015                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001B                     	;# 
   138  001B                     	;# 
   139  001C                     	;# 
   140  001D                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  0081                     	;# 
   144  0085                     	;# 
   145  0086                     	;# 
   146  0087                     	;# 
   147  0088                     	;# 
   148  0089                     	;# 
   149  008C                     	;# 
   150  008D                     	;# 
   151  008E                     	;# 
   152  0091                     	;# 
   153  0092                     	;# 
   154  0093                     	;# 
   155  0094                     	;# 
   156  0098                     	;# 
   157  0099                     	;# 
   158  009C                     	;# 
   159  009D                     	;# 
   160  009E                     	;# 
   161  009F                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  010F                     	;# 
   166  018C                     	;# 
   167  018D                     	;# 
   168                           
   169                           	psect	nvCOMMON
   170  0077                     __pnvCOMMON:
   171  0077                     _duty_cycle:
   172  0077                     	ds	2
   173  001B                     _CCPR2L	set	27
   174  0015                     _CCPR1L	set	21
   175  0008                     _PORTD	set	8
   176  001D                     _CCP2CONbits	set	29
   177  0017                     _CCP1CONbits	set	23
   178  000B                     _INTCONbits	set	11
   179  0012                     _T2CONbits	set	18
   180  0008                     _PORTDbits	set	8
   181  000C                     _PIR1bits	set	12
   182  0088                     _TRISD	set	136
   183  0087                     _TRISC	set	135
   184  008C                     _PIE1bits	set	140
   185  0092                     _PR2	set	146
   186                           
   187                           	psect	cinit
   188  07FA                     start_initialization:	
   189                           ; #config settings
   190                           
   191  07FA                     __initialization:
   192                           
   193                           ; Clear objects allocated to COMMON
   194  07FA  01F9               	clrf	__pbssCOMMON& (0+127)
   195  07FB  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   196  07FC                     end_of_initialization:	
   197                           ;End of C runtime variable initialization code
   198                           
   199  07FC                     __end_of__initialization:
   200  07FC  0183               	clrf	3
   201  07FD  120A  118A  2F10   	ljmp	_main	;jump to C main() function
   202                           
   203                           	psect	bssCOMMON
   204  0079                     __pbssCOMMON:
   205  0079                     _i:
   206  0079                     	ds	2
   207                           
   208                           	psect	cstackCOMMON
   209  0071                     __pcstackCOMMON:
   210  0071                     ?_my_isr:
   211  0071                     ??_my_isr:	
   212                           ; 1 bytes @ 0x0
   213                           
   214  0071                     ?_main:	
   215                           ; 1 bytes @ 0x0
   216                           
   217                           
   218                           ; 1 bytes @ 0x0
   219  0071                     	ds	2
   220  0073                     ??_main:
   221                           
   222                           ; 1 bytes @ 0x2
   223  0073                     	ds	4
   224                           
   225                           	psect	maintext
   226  0710                     __pmaintext:	
   227 ;;
   228 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   229 ;;
   230 ;; *************** function _main *****************
   231 ;; Defined at:
   232 ;;		line 35 in file "main.c"
   233 ;; Parameters:    Size  Location     Type
   234 ;;		None
   235 ;; Auto vars:     Size  Location     Type
   236 ;;		None
   237 ;; Return value:  Size  Location     Type
   238 ;;                  1    wreg      void 
   239 ;; Registers used:
   240 ;;		wreg, status,2, status,0, btemp+1
   241 ;; Tracked objects:
   242 ;;		On entry : B00/0
   243 ;;		On exit  : 0/0
   244 ;;		Unchanged: 0/0
   245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   246 ;;      Params:         0       0       0       0       0
   247 ;;      Locals:         0       0       0       0       0
   248 ;;      Temps:          4       0       0       0       0
   249 ;;      Totals:         4       0       0       0       0
   250 ;;Total ram usage:        4 bytes
   251 ;; Hardware stack levels required when called:    1
   252 ;; This function calls:
   253 ;;		Nothing
   254 ;; This function is called by:
   255 ;;		Startup code after reset
   256 ;; This function uses a non-reentrant model
   257 ;;
   258                           
   259                           
   260                           ;psect for function _main
   261  0710                     _main:
   262  0710                     l662:	
   263                           ;incstack = 0
   264                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1]
   265                           
   266                           
   267                           ;main.c: 37:     T2CONbits.T2CKPS1 = 0;
   268  0710  1283               	bcf	3,5	;RP0=0, select bank0
   269  0711  1303               	bcf	3,6	;RP1=0, select bank0
   270  0712  1092               	bcf	18,1	;volatile
   271                           
   272                           ;main.c: 38:     T2CONbits.T2CKPS0 = 0;
   273  0713  1012               	bcf	18,0	;volatile
   274                           
   275                           ;main.c: 40:     T2CONbits.TOUTPS3 = 1;
   276  0714  1712               	bsf	18,6	;volatile
   277                           
   278                           ;main.c: 41:     T2CONbits.TOUTPS2 = 0;
   279  0715  1292               	bcf	18,5	;volatile
   280                           
   281                           ;main.c: 42:     T2CONbits.TOUTPS1 = 1;
   282  0716  1612               	bsf	18,4	;volatile
   283                           
   284                           ;main.c: 43:     T2CONbits.TOUTPS0 = 0;
   285  0717  1192               	bcf	18,3	;volatile
   286                           
   287                           ;main.c: 45:     T2CONbits.TMR2ON = 1;
   288  0718  1512               	bsf	18,2	;volatile
   289                           
   290                           ;main.c: 47:     INTCONbits.GIE = 1;
   291  0719  178B               	bsf	11,7	;volatile
   292                           
   293                           ;main.c: 48:     INTCONbits.PEIE = 1;
   294  071A  170B               	bsf	11,6	;volatile
   295                           
   296                           ;main.c: 49:     PIE1bits.TMR2IE = 1;
   297  071B  1683               	bsf	3,5	;RP0=1, select bank1
   298  071C  1303               	bcf	3,6	;RP1=0, select bank1
   299  071D  148C               	bsf	12,1	;volatile
   300                           
   301                           ;main.c: 51:     CCP1CONbits.CCP1M3 = 1;
   302  071E  1283               	bcf	3,5	;RP0=0, select bank0
   303  071F  1303               	bcf	3,6	;RP1=0, select bank0
   304  0720  1597               	bsf	23,3	;volatile
   305                           
   306                           ;main.c: 52:     CCP1CONbits.CCP1M2 = 1;
   307  0721  1517               	bsf	23,2	;volatile
   308                           
   309                           ;main.c: 53:     CCP1CONbits.CCP1M1 = 1;
   310  0722  1497               	bsf	23,1	;volatile
   311                           
   312                           ;main.c: 54:     CCP1CONbits.CCP1M0 = 1;
   313  0723  1417               	bsf	23,0	;volatile
   314                           
   315                           ;main.c: 56:     CCP2CONbits.CCP2M3 = 1;
   316  0724  159D               	bsf	29,3	;volatile
   317                           
   318                           ;main.c: 57:     CCP2CONbits.CCP2M2 = 1;
   319  0725  151D               	bsf	29,2	;volatile
   320                           
   321                           ;main.c: 58:     CCP2CONbits.CCP2M1 = 1;
   322  0726  149D               	bsf	29,1	;volatile
   323                           
   324                           ;main.c: 59:     CCP2CONbits.CCP2M0 = 1;
   325  0727  141D               	bsf	29,0	;volatile
   326  0728                     l664:
   327                           
   328                           ;main.c: 61:     PR2 = 255;
   329  0728  30FF               	movlw	255
   330  0729  1683               	bsf	3,5	;RP0=1, select bank1
   331  072A  1303               	bcf	3,6	;RP1=0, select bank1
   332  072B  0092               	movwf	18	;volatile
   333  072C                     l666:
   334                           
   335                           ;main.c: 63:     TRISC = 0x00;
   336  072C  0187               	clrf	7	;volatile
   337  072D                     l668:
   338                           
   339                           ;main.c: 65:     TRISD = 0x00;
   340  072D  0188               	clrf	8	;volatile
   341  072E                     l670:
   342                           
   343                           ;main.c: 66:     PORTD = 0x00;
   344  072E  1283               	bcf	3,5	;RP0=0, select bank0
   345  072F  1303               	bcf	3,6	;RP1=0, select bank0
   346  0730  0188               	clrf	8	;volatile
   347  0731                     l672:
   348                           
   349                           ;main.c: 69:         for(duty_cycle = 1 ; duty_cycle < 1024 ; duty_cycle++) {
   350  0731  3001               	movlw	1
   351  0732  00F7               	movwf	_duty_cycle
   352  0733  3000               	movlw	0
   353  0734  00F8               	movwf	_duty_cycle+1
   354  0735                     l678:
   355                           
   356                           ;main.c: 70:             CCPR1L = duty_cycle >> 2;
   357  0735  0878               	movf	_duty_cycle+1,w
   358  0736  00F4               	movwf	??_main+1
   359  0737  0877               	movf	_duty_cycle,w
   360  0738  00F3               	movwf	??_main
   361  0739  0D74               	rlf	??_main+1,w
   362  073A  0CF4               	rrf	??_main+1,f
   363  073B  0CF3               	rrf	??_main,f
   364  073C  0D74               	rlf	??_main+1,w
   365  073D  0CF4               	rrf	??_main+1,f
   366  073E  0CF3               	rrf	??_main,f
   367  073F  0873               	movf	??_main,w
   368  0740  1283               	bcf	3,5	;RP0=0, select bank0
   369  0741  1303               	bcf	3,6	;RP1=0, select bank0
   370  0742  0095               	movwf	21	;volatile
   371  0743                     l680:
   372                           
   373                           ;main.c: 71:             CCP1CONbits.CCP1X = duty_cycle & 0x001;
   374  0743  0877               	movf	_duty_cycle,w
   375  0744  3901               	andlw	1
   376  0745  00F3               	movwf	??_main
   377  0746  0EF3               	swapf	??_main,f
   378  0747  0DF3               	rlf	??_main,f
   379  0748  0817               	movf	23,w	;volatile
   380  0749  0673               	xorwf	??_main,w
   381  074A  39DF               	andlw	-33
   382  074B  0673               	xorwf	??_main,w
   383  074C  0097               	movwf	23	;volatile
   384  074D                     l682:
   385                           
   386                           ;main.c: 72:             CCP1CONbits.CCP1Y = duty_cycle & 0x002;
   387  074D  0877               	movf	_duty_cycle,w
   388  074E  3902               	andlw	2
   389  074F  00F3               	movwf	??_main
   390  0750  0EF3               	swapf	??_main,f
   391  0751  0817               	movf	23,w	;volatile
   392  0752  0673               	xorwf	??_main,w
   393  0753  39EF               	andlw	-17
   394  0754  0673               	xorwf	??_main,w
   395  0755  0097               	movwf	23	;volatile
   396  0756                     l684:
   397                           
   398                           ;main.c: 74:             CCPR2L = (1023 - duty_cycle) >> 2;
   399  0756  30FF               	movlw	255
   400  0757  00F3               	movwf	??_main
   401  0758  3003               	movlw	3
   402  0759  00F4               	movwf	??_main+1
   403  075A  0877               	movf	_duty_cycle,w
   404  075B  0273               	subwf	??_main,w
   405  075C  00F5               	movwf	??_main+2
   406  075D  0878               	movf	_duty_cycle+1,w
   407  075E  1C03               	skipc
   408  075F  0A78               	incf	_duty_cycle+1,w
   409  0760  0274               	subwf	??_main+1,w
   410  0761  00F6               	movwf	??_main+3
   411  0762  0D76               	rlf	??_main+3,w
   412  0763  0CF6               	rrf	??_main+3,f
   413  0764  0CF5               	rrf	??_main+2,f
   414  0765  0D76               	rlf	??_main+3,w
   415  0766  0CF6               	rrf	??_main+3,f
   416  0767  0CF5               	rrf	??_main+2,f
   417  0768  0875               	movf	??_main+2,w
   418  0769  009B               	movwf	27	;volatile
   419  076A                     l686:
   420                           
   421                           ;main.c: 75:             CCP2CONbits.CCP2X = (1023 - duty_cycle) & 0x001;
   422  076A  0977               	comf	_duty_cycle,w
   423  076B  3901               	andlw	1
   424  076C  00F3               	movwf	??_main
   425  076D  0EF3               	swapf	??_main,f
   426  076E  0DF3               	rlf	??_main,f
   427  076F  081D               	movf	29,w	;volatile
   428  0770  0673               	xorwf	??_main,w
   429  0771  39DF               	andlw	-33
   430  0772  0673               	xorwf	??_main,w
   431  0773  009D               	movwf	29	;volatile
   432  0774                     l688:
   433                           
   434                           ;main.c: 76:             CCP2CONbits.CCP2Y = (1023 - duty_cycle) & 0x002;
   435  0774  0977               	comf	_duty_cycle,w
   436  0775  3902               	andlw	2
   437  0776  00F3               	movwf	??_main
   438  0777  0EF3               	swapf	??_main,f
   439  0778  081D               	movf	29,w	;volatile
   440  0779  0673               	xorwf	??_main,w
   441  077A  39EF               	andlw	-17
   442  077B  0673               	xorwf	??_main,w
   443  077C  009D               	movwf	29	;volatile
   444  077D                     l690:
   445                           
   446                           ;main.c: 77:             _delay((unsigned long)((1)*(20000000/4000.0)));
   447  077D  3007               	movlw	7
   448  077E  00F4               	movwf	??_main+1
   449  077F  307D               	movlw	125
   450  0780  00F3               	movwf	??_main
   451  0781                     u67:
   452  0781  0BF3               	decfsz	??_main,f
   453  0782  2F81               	goto	u67
   454  0783  0BF4               	decfsz	??_main+1,f
   455  0784  2F81               	goto	u67
   456  0785                     l692:
   457                           
   458                           ;main.c: 78:         }
   459  0785  3001               	movlw	1
   460  0786  07F7               	addwf	_duty_cycle,f
   461  0787  1803               	skipnc
   462  0788  0AF8               	incf	_duty_cycle+1,f
   463  0789  3000               	movlw	0
   464  078A  07F8               	addwf	_duty_cycle+1,f
   465  078B                     l694:
   466  078B  0878               	movf	_duty_cycle+1,w
   467  078C  3A80               	xorlw	128
   468  078D  00FF               	movwf	btemp+1
   469  078E  3084               	movlw	132
   470  078F  027F               	subwf	btemp+1,w
   471  0790  1D03               	skipz
   472  0791  2F94               	goto	u45
   473  0792  3000               	movlw	0
   474  0793  0277               	subwf	_duty_cycle,w
   475  0794                     u45:
   476  0794  1C03               	skipc
   477  0795  2F97               	goto	u41
   478  0796  2F98               	goto	u40
   479  0797                     u41:
   480  0797  2F35               	goto	l678
   481  0798                     u40:
   482  0798                     l696:
   483                           
   484                           ;main.c: 79:         for(duty_cycle = 1023 ; duty_cycle > 0 ; duty_cycle--) {
   485  0798  30FF               	movlw	255
   486  0799  00F7               	movwf	_duty_cycle
   487  079A  3003               	movlw	3
   488  079B  00F8               	movwf	_duty_cycle+1
   489  079C                     l702:
   490                           
   491                           ;main.c: 80:             CCPR1L = duty_cycle >> 2;
   492  079C  0878               	movf	_duty_cycle+1,w
   493  079D  00F4               	movwf	??_main+1
   494  079E  0877               	movf	_duty_cycle,w
   495  079F  00F3               	movwf	??_main
   496  07A0  0D74               	rlf	??_main+1,w
   497  07A1  0CF4               	rrf	??_main+1,f
   498  07A2  0CF3               	rrf	??_main,f
   499  07A3  0D74               	rlf	??_main+1,w
   500  07A4  0CF4               	rrf	??_main+1,f
   501  07A5  0CF3               	rrf	??_main,f
   502  07A6  0873               	movf	??_main,w
   503  07A7  1283               	bcf	3,5	;RP0=0, select bank0
   504  07A8  1303               	bcf	3,6	;RP1=0, select bank0
   505  07A9  0095               	movwf	21	;volatile
   506  07AA                     l704:
   507                           
   508                           ;main.c: 81:             CCP1CONbits.CCP1X = duty_cycle & 0x001;
   509  07AA  0877               	movf	_duty_cycle,w
   510  07AB  3901               	andlw	1
   511  07AC  00F3               	movwf	??_main
   512  07AD  0EF3               	swapf	??_main,f
   513  07AE  0DF3               	rlf	??_main,f
   514  07AF  0817               	movf	23,w	;volatile
   515  07B0  0673               	xorwf	??_main,w
   516  07B1  39DF               	andlw	-33
   517  07B2  0673               	xorwf	??_main,w
   518  07B3  0097               	movwf	23	;volatile
   519  07B4                     l706:
   520                           
   521                           ;main.c: 82:             CCP1CONbits.CCP1Y = duty_cycle & 0x002;
   522  07B4  0877               	movf	_duty_cycle,w
   523  07B5  3902               	andlw	2
   524  07B6  00F3               	movwf	??_main
   525  07B7  0EF3               	swapf	??_main,f
   526  07B8  0817               	movf	23,w	;volatile
   527  07B9  0673               	xorwf	??_main,w
   528  07BA  39EF               	andlw	-17
   529  07BB  0673               	xorwf	??_main,w
   530  07BC  0097               	movwf	23	;volatile
   531  07BD                     l708:
   532                           
   533                           ;main.c: 84:             CCPR2L = (1023 - duty_cycle) >> 2;
   534  07BD  30FF               	movlw	255
   535  07BE  00F3               	movwf	??_main
   536  07BF  3003               	movlw	3
   537  07C0  00F4               	movwf	??_main+1
   538  07C1  0877               	movf	_duty_cycle,w
   539  07C2  0273               	subwf	??_main,w
   540  07C3  00F5               	movwf	??_main+2
   541  07C4  0878               	movf	_duty_cycle+1,w
   542  07C5  1C03               	skipc
   543  07C6  0A78               	incf	_duty_cycle+1,w
   544  07C7  0274               	subwf	??_main+1,w
   545  07C8  00F6               	movwf	??_main+3
   546  07C9  0D76               	rlf	??_main+3,w
   547  07CA  0CF6               	rrf	??_main+3,f
   548  07CB  0CF5               	rrf	??_main+2,f
   549  07CC  0D76               	rlf	??_main+3,w
   550  07CD  0CF6               	rrf	??_main+3,f
   551  07CE  0CF5               	rrf	??_main+2,f
   552  07CF  0875               	movf	??_main+2,w
   553  07D0  009B               	movwf	27	;volatile
   554  07D1                     l710:
   555                           
   556                           ;main.c: 85:             CCP2CONbits.CCP2X = (1023 - duty_cycle) & 0x00;
   557  07D1  129D               	bcf	29,5	;volatile
   558  07D2                     l712:
   559                           
   560                           ;main.c: 86:             CCP2CONbits.CCP2Y = (1023 - duty_cycle) & 0x002;
   561  07D2  0977               	comf	_duty_cycle,w
   562  07D3  3902               	andlw	2
   563  07D4  00F3               	movwf	??_main
   564  07D5  0EF3               	swapf	??_main,f
   565  07D6  081D               	movf	29,w	;volatile
   566  07D7  0673               	xorwf	??_main,w
   567  07D8  39EF               	andlw	-17
   568  07D9  0673               	xorwf	??_main,w
   569  07DA  009D               	movwf	29	;volatile
   570                           
   571                           ;main.c: 87:             _delay((unsigned long)((1)*(20000000/4000.0)));
   572  07DB  3007               	movlw	7
   573  07DC  00F4               	movwf	??_main+1
   574  07DD  307D               	movlw	125
   575  07DE  00F3               	movwf	??_main
   576  07DF                     u77:
   577  07DF  0BF3               	decfsz	??_main,f
   578  07E0  2FDF               	goto	u77
   579  07E1  0BF4               	decfsz	??_main+1,f
   580  07E2  2FDF               	goto	u77
   581                           
   582                           ;main.c: 88:         }
   583  07E3  30FF               	movlw	255
   584  07E4  07F7               	addwf	_duty_cycle,f
   585  07E5  1803               	skipnc
   586  07E6  0AF8               	incf	_duty_cycle+1,f
   587  07E7  30FF               	movlw	255
   588  07E8  07F8               	addwf	_duty_cycle+1,f
   589  07E9                     l714:
   590  07E9  0878               	movf	_duty_cycle+1,w
   591  07EA  3A80               	xorlw	128
   592  07EB  00FF               	movwf	btemp+1
   593  07EC  3080               	movlw	128
   594  07ED  027F               	subwf	btemp+1,w
   595  07EE  1D03               	skipz
   596  07EF  2FF2               	goto	u55
   597  07F0  3001               	movlw	1
   598  07F1  0277               	subwf	_duty_cycle,w
   599  07F2                     u55:
   600  07F2  1803               	skipnc
   601  07F3  2FF5               	goto	u51
   602  07F4  2FF6               	goto	u50
   603  07F5                     u51:
   604  07F5  2F9C               	goto	l702
   605  07F6                     u50:
   606  07F6  2F31               	goto	l672
   607  07F7  120A  118A  280C   	ljmp	start
   608  07FA                     __end_of_main:
   609                           
   610                           	psect	text1
   611  06E2                     __ptext1:	
   612 ;; *************** function _my_isr *****************
   613 ;; Defined at:
   614 ;;		line 20 in file "main.c"
   615 ;; Parameters:    Size  Location     Type
   616 ;;		None
   617 ;; Auto vars:     Size  Location     Type
   618 ;;		None
   619 ;; Return value:  Size  Location     Type
   620 ;;                  1    wreg      void 
   621 ;; Registers used:
   622 ;;		wreg, status,2, status,0
   623 ;; Tracked objects:
   624 ;;		On entry : 0/0
   625 ;;		On exit  : 0/0
   626 ;;		Unchanged: 0/0
   627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   628 ;;      Params:         0       0       0       0       0
   629 ;;      Locals:         0       0       0       0       0
   630 ;;      Temps:          2       0       0       0       0
   631 ;;      Totals:         2       0       0       0       0
   632 ;;Total ram usage:        2 bytes
   633 ;; Hardware stack levels used:    1
   634 ;; This function calls:
   635 ;;		Nothing
   636 ;; This function is called by:
   637 ;;		Interrupt level 1
   638 ;; This function uses a non-reentrant model
   639 ;;
   640                           
   641                           
   642                           ;psect for function _my_isr
   643  06E2                     _my_isr:
   644  06E2                     i1l644:
   645                           
   646                           ;main.c: 21:     if(PIR1bits.TMR2IF) {
   647  06E2  1283               	bcf	3,5	;RP0=0, select bank0
   648  06E3  1303               	bcf	3,6	;RP1=0, select bank0
   649  06E4  1C8C               	btfss	12,1	;volatile
   650  06E5  2EE7               	goto	u1_21
   651  06E6  2EE8               	goto	u1_20
   652  06E7                     u1_21:
   653  06E7  2F09               	goto	i1l40
   654  06E8                     u1_20:
   655  06E8                     i1l646:
   656                           
   657                           ;main.c: 22:         i++;
   658  06E8  3001               	movlw	1
   659  06E9  07F9               	addwf	_i,f
   660  06EA  1803               	skipnc
   661  06EB  0AFA               	incf	_i+1,f
   662  06EC  3000               	movlw	0
   663  06ED  07FA               	addwf	_i+1,f
   664  06EE                     i1l648:
   665                           
   666                           ;main.c: 23:         if(i == 195) {
   667  06EE  30C3               	movlw	195
   668  06EF  0679               	xorwf	_i,w
   669  06F0  047A               	iorwf	_i+1,w
   670  06F1  1D03               	btfss	3,2
   671  06F2  2EF4               	goto	u2_21
   672  06F3  2EF5               	goto	u2_20
   673  06F4                     u2_21:
   674  06F4  2EF6               	goto	i1l652
   675  06F5                     u2_20:
   676  06F5                     i1l650:
   677                           
   678                           ;main.c: 24:             PORTDbits.RD0 = 0;
   679  06F5  1008               	bcf	8,0	;volatile
   680  06F6                     i1l652:
   681                           
   682                           ;main.c: 26:         if(i == 390) {
   683  06F6  3086               	movlw	134
   684  06F7  0679               	xorwf	_i,w
   685  06F8  1D03               	skipz
   686  06F9  2EFE               	goto	u3_21
   687  06FA  037A               	decf	_i+1,w
   688  06FB  1D03               	btfss	3,2
   689  06FC  2EFE               	goto	u3_21
   690  06FD  2EFF               	goto	u3_20
   691  06FE                     u3_21:
   692  06FE  2F02               	goto	i1l658
   693  06FF                     u3_20:
   694  06FF                     i1l654:
   695                           
   696                           ;main.c: 27:             PORTDbits.RD0 = 1;
   697  06FF  1408               	bsf	8,0	;volatile
   698  0700                     i1l656:
   699                           
   700                           ;main.c: 28:             i = 0;
   701  0700  01F9               	clrf	_i
   702  0701  01FA               	clrf	_i+1
   703  0702                     i1l658:
   704                           
   705                           ;main.c: 30:         PR2 = 255;
   706  0702  30FF               	movlw	255
   707  0703  1683               	bsf	3,5	;RP0=1, select bank1
   708  0704  1303               	bcf	3,6	;RP1=0, select bank1
   709  0705  0092               	movwf	18	;volatile
   710  0706                     i1l660:
   711                           
   712                           ;main.c: 31:         PIR1bits.TMR2IF = 0;
   713  0706  1283               	bcf	3,5	;RP0=0, select bank0
   714  0707  1303               	bcf	3,6	;RP1=0, select bank0
   715  0708  108C               	bcf	12,1	;volatile
   716  0709                     i1l40:
   717  0709  0872               	movf	??_my_isr+1,w
   718  070A  008A               	movwf	10
   719  070B  0E71               	swapf	??_my_isr,w
   720  070C  0083               	movwf	3
   721  070D  0EFE               	swapf	btemp,f
   722  070E  0E7E               	swapf	btemp,w
   723  070F  0009               	retfie
   724  0710                     __end_of_my_isr:
   725  007E                     btemp	set	126	;btemp
   726  007E                     wtemp0	set	126
   727                           
   728                           	psect	intentry
   729  0004                     __pintentry:	
   730                           ;incstack = 0
   731                           ; Regs used in _my_isr: [wreg+status,2+status,0]
   732                           
   733  0004                     interrupt_function:
   734  007E                     saved_w	set	btemp
   735  0004  00FE               	movwf	btemp
   736  0005  0E03               	swapf	3,w
   737  0006  00F1               	movwf	??_my_isr
   738  0007  080A               	movf	10,w
   739  0008  00F2               	movwf	??_my_isr+1
   740  0009  120A  118A  2EE2   	ljmp	_my_isr
   741                           
   742                           	psect	config
   743                           
   744                           ;Config register CONFIG @ 0x2007
   745                           ;	Oscillator Selection bits
   746                           ;	FOSC = HS, HS oscillator
   747                           ;	Watchdog Timer Enable bit
   748                           ;	WDTE = OFF, WDT disabled
   749                           ;	Power-up Timer Enable bit
   750                           ;	PWRTE = OFF, PWRT disabled
   751                           ;	Brown-out Reset Enable bit
   752                           ;	BOREN = OFF, BOR disabled
   753                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   754                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   755                           ;	Data EEPROM Memory Code Protection bit
   756                           ;	CPD = OFF, Data EEPROM code protection off
   757                           ;	Flash Program Memory Write Enable bits
   758                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   759                           ;	In-Circuit Debugger Mode bit
   760                           ;	DEBUG = 0x1, unprogrammed default
   761                           ;	Flash Program Memory Code Protection bit
   762                           ;	CP = OFF, Code protection off
   763  2007                     	org	8199
   764  2007  3F3A               	dw	16186

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13      6      10
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _my_isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _my_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _my_isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _my_isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _my_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0       0
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _my_isr                                               2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _my_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            D      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               D      6       A       1       76.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            55      0       0       8        0.0%
BANK3               55      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       A      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Thu Jan 28 17:59:14 2021

                      _i 0079                       u40 0798                       u41 0797  
                     u50 07F6                       u51 07F5                       u45 0794  
                     u55 07F2                       u67 0781                       u77 07DF  
                    l710 07D1                      l702 079C                      l712 07D2  
                    l704 07AA                      l714 07E9                      l706 07B4  
                    l708 07BD                      l670 072E                      l662 0710  
                    l680 0743                      l672 0731                      l664 0728  
                    l690 077D                      l682 074D                      l666 072C  
                    l692 0785                      l684 0756                      l668 072D  
                    l694 078B                      l686 076A                      l678 0735  
                    l696 0798                      l688 0774                      _PR2 0092  
                   i1l40 0709                     u1_20 06E8                     u1_21 06E7  
                   u2_20 06F5                     u2_21 06F4                     u3_20 06FF  
                   u3_21 06FE                     _main 0710                     btemp 007E  
                   start 000C                    ?_main 0071                    i1l650 06F5  
                  i1l660 0706                    i1l652 06F6                    i1l644 06E2  
                  i1l654 06FF                    i1l646 06E8                    i1l656 0700  
                  i1l648 06EE                    i1l658 0702                    _PORTD 0008  
                  _TRISC 0087                    _TRISD 0088                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07FA  
           __end_of_main 07FA                   ??_main 0073                   _CCPR1L 0015  
                 _CCPR2L 001B                   _my_isr 06E2                   saved_w 007E  
__end_of__initialization 07FC           __pcstackCOMMON 0071               __pnvCOMMON 0077  
             __pmaintext 0710               __pintentry 0004                  ?_my_isr 0071  
                __ptext1 06E2          __size_of_my_isr 002E                _T2CONbits 0012  
             _duty_cycle 0077     end_of_initialization 07FC                _PORTDbits 0008  
            _CCP1CONbits 0017              _CCP2CONbits 001D           __end_of_my_isr 0710  
    start_initialization 07FA                 ??_my_isr 0071              __pbssCOMMON 0079  
              ___latbits 0002        interrupt_function 0004                 _PIE1bits 008C  
               _PIR1bits 000C            __size_of_main 00EA               _INTCONbits 000B  
               intlevel1 0000  
